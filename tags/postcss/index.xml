<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PostCSS on Isaac Dedini</title><link>https://vivecuervo7.github.io/dev-blog/tags/postcss/</link><description>Recent content in PostCSS on Isaac Dedini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://vivecuervo7.github.io/dev-blog/tags/postcss/index.xml" rel="self" type="application/rss+xml"/><item><title>PostCSS: Styling without the Sass</title><link>https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/cover.jpg" alt="Featured image of post PostCSS: Styling without the Sass" />&lt;p>Whenever I decide to do any programming outside of work hours, I like to pick up a bunch of tools that I don&amp;rsquo;t get to touch in my day-to-day, even if it&amp;rsquo;s just so side projects don&amp;rsquo;t &lt;em>feel&lt;/em> like work.&lt;/p>
&lt;p>Sometimes, I stumble across some tooling that I want to roll into my standard workflow — &lt;a class="link" href="https://postcss.org/" target="_blank" rel="noopener"
>PostCSS&lt;/a> being one that I&amp;rsquo;ve stumbled across a couple of times now and decided to cobble together something a little firmer than just a &amp;ldquo;hey, I tried this and I liked it&amp;rdquo;. More specifically, I have found myself leaning towards PostCSS as a replacement for the default of dragging Sass into every new project I&amp;rsquo;ve worked on.&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong — Sass is and has been a great tool to use over the years, but I feel as though I&amp;rsquo;ve only ever really needed a fraction of what it offers. Not to mention that the growth of CSS itself has slowly started eating away at the benefits I&amp;rsquo;ve found in Sass, such as nesting or variables.&lt;/p>
&lt;h2 id="what-is-postcss">What is PostCSS
&lt;/h2>&lt;p>Or maybe it&amp;rsquo;s easier to talk about what it isn&amp;rsquo;t.&lt;/p>
&lt;p>It certainly isn&amp;rsquo;t a pre-processor like Sass or Less. It doesn&amp;rsquo;t use a different syntax the way these pre-processors do, allowing us to instead write standard CSS. Which is good for newcomers who may not be familiar with a particular flavour of pre-processor!&lt;/p>
&lt;p>It also isn&amp;rsquo;t strictly a &lt;em>post&lt;/em>-processor, despite the name alluding to such. The rich plugin ecosystem really allows it to act as both a pre- and post-processor. It&amp;rsquo;s modular, and highly flexible — you could even keep your desired pre-processor around. This isn&amp;rsquo;t an either-or scenario.&lt;/p>
&lt;h3 id="ok-so-what-is-it">Ok&amp;hellip; so, what &lt;em>is&lt;/em> it?
&lt;/h3>&lt;p>PostCSS is, in their own words, &amp;ldquo;a tool for transforming CSS with JavaScript&amp;rdquo;.&lt;/p>
&lt;p>What PostCSS does is transpile your written CSS into JavaScript, allowing us to process it before writing it back as CSS. By itself, it doesn&amp;rsquo;t actually transform anything — for that we&amp;rsquo;ll need to tap into the plugins available to PostCSS.&lt;/p>
&lt;p>On the topic of plugins, there are a few of them in the wild which are regularly used — often without the explicit intention to use PostCSS. &lt;a class="link" href="https://autoprefixer.github.io/" target="_blank" rel="noopener"
>Autoprefixer&lt;/a>, &lt;a class="link" href="https://cssnano.github.io/cssnano/" target="_blank" rel="noopener"
>cssnano&lt;/a> and &lt;a class="link" href="https://stylelint.io/" target="_blank" rel="noopener"
>Stylelint&lt;/a> are all commonly used PostCSS plugins, meaning there&amp;rsquo;s a good chance you&amp;rsquo;ve already used PostCSS!&lt;/p>
&lt;h3 id="wait-so-if-its-not-a-pre-processor">Wait, so if it&amp;rsquo;s &lt;em>not&lt;/em> a pre-processor&amp;hellip;
&lt;/h3>&lt;p>Yep, that&amp;rsquo;s right. You can stick with your trusty Sass, Less, or Stylus.
Or, you could bring in a few plugins to get your pre-processor-like functionality. This is where a lot of my interest in PostCSS started, looking at it as a potential drop-in replacement for Sass entirely. I&amp;rsquo;ll cover some of &lt;a class="link" href="#postcss-the-pre-processor" >those specific plugins below&lt;/a>.&lt;/p>
&lt;h2 id="plugins">Plugins
&lt;/h2>&lt;p>All the useful things you can do with PostCSS come from plugins. Below we&amp;rsquo;ll have a look at some of the plugins that I&amp;rsquo;ve found consistently seem to bubble up as the more useful picks.&lt;/p>
&lt;p>If you want to see &lt;em>all&lt;/em> of the plugins, &lt;a class="link" href="https://postcss.org/docs/postcss-plugins" target="_blank" rel="noopener"
>here is a good place to start&lt;/a>.&lt;/p>
&lt;h3 id="the-plugins-you-probably-want">The plugins you probably want
&lt;/h3>&lt;p>&lt;strong>Autoprefixer&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/postcss/autoprefixer?tab=readme-ov-file" target="_blank" rel="noopener"
>Autoprefixer&lt;/a> adds vendor prefixes to your CSS using rules from &lt;a class="link" href="https://caniuse.com/" target="_blank" rel="noopener"
>Can I Use&lt;/a>. Forget about manually writing vendor prefixes entirely! Stylelint can also be configured to &lt;a class="link" href="https://stylelint.io/user-guide/rules/property-no-vendor-prefix/" target="_blank" rel="noopener"
>disallow writing vendor prefixes&lt;/a> too, so you don&amp;rsquo;t even need to remember to forget about vendor prefixes.&lt;/p>
&lt;p>&lt;strong>cssnano&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/cssnano/cssnano?tab=readme-ov-file" target="_blank" rel="noopener"
>cssnano&lt;/a> makes your CSS small. It&amp;rsquo;s a minifier that compresses your CSS to reduce your overall bundle size. There are a few presets, the default being a safe option, making it easy enough to drop in that it seems almost silly to &lt;em>not&lt;/em> include it. The &lt;a class="link" href="https://cssnano.github.io/cssnano/docs/what-are-optimisations/" target="_blank" rel="noopener"
>full list of optimisations can be found here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Stylelint&lt;/strong>&lt;/p>
&lt;p>Ok, ok. You probably won&amp;rsquo;t install this as a plugin the way you will the others, but it&amp;rsquo;s still a PostCSS plugin so I&amp;rsquo;ll include it here. &lt;a class="link" href="https://stylelint.io/" target="_blank" rel="noopener"
>Stylelint&lt;/a> is simply put, a linting tool for your CSS. There are a &lt;a class="link" href="https://stylelint.io/user-guide/rules" target="_blank" rel="noopener"
>bunch of useful rules&lt;/a> that are worth perusing.&lt;/p>
&lt;p>If the rules included with Stylelint aren&amp;rsquo;t quite enough for you, there are a bunch of &lt;a class="link" href="https://github.com/stylelint/awesome-stylelint" target="_blank" rel="noopener"
>plugins, configs and integrations&lt;/a> available. Just in case you need plugins for your plugins.&lt;/p>
&lt;h3 id="tomorrows-css-today">Tomorrow&amp;rsquo;s CSS, today
&lt;/h3>&lt;p>This one is in my opinion one of the most powerful and compelling reasons to use PostCSS, so it&amp;rsquo;s getting its own section.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env" target="_blank" rel="noopener"
>PostCSS Preset Env&lt;/a> essentially allows us to use modern CSS without worrying about it not being supported in a bunch of browsers (looking at you, &lt;del>Internet Explorer&lt;/del> Safari). By leveraging &lt;a class="link" href="https://cssdb.org/" target="_blank" rel="noopener"
>CSSDB&lt;/a> and your specified browser targets, it automatically includes the necessary plugins to ensure consistent behavior across different environments.&lt;/p>
&lt;p>You can even start using experimental or proposed CSS features. PostCSS Preset Env&amp;rsquo;s complete feature list can be found &lt;a class="link" href="https://github.com/csstools/postcss-plugins/blob/main/plugin-packs/postcss-preset-env/FEATURES.md" target="_blank" rel="noopener"
>here&lt;/a>. Some favourites are listed below:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://cssdb.org/#custom-media-queries" target="_blank" rel="noopener"
>custom-media-queries&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cssdb.org/#custom-selectors" target="_blank" rel="noopener"
>custom-selectors&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cssdb.org/#light-dark-function" target="_blank" rel="noopener"
>light-dark-function&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="sass-like-functionality">Sass-like functionality
&lt;/h3>&lt;p>The last time I looked at bringing in a bunch of Sass-like functionality, I found myself installing a bunch of plugins for all the various things. Those individual plugins are still available if you really want to bring them in individually, such as &lt;a class="link" href="https://github.com/postcss/postcss-mixins" target="_blank" rel="noopener"
>postcss-mixins&lt;/a>.&lt;/p>
&lt;p>It looks as though the easiest path to similar functionality might be to just go straight for &lt;a class="link" href="https://github.com/csstools/postcss-advanced-variables?tab=readme-ov-file" target="_blank" rel="noopener"
>postcss-advanced-variables&lt;/a>. This plugin brings Sass-like &lt;code>$variables&lt;/code>, &lt;code>@if&lt;/code>, &lt;code>@else&lt;/code>, &lt;code>@for&lt;/code> and &lt;code>@each&lt;/code> rules, as well as &lt;code>@mixin&lt;/code> rules. And honestly, with nesting already supported, this covers 90% of the things I really got out of Sass anyway. A counterpart for Sass&amp;rsquo; maps exists in &lt;a class="link" href="https://github.com/Scrum/postcss-map-get" target="_blank" rel="noopener"
>postcss-map-get&lt;/a>, and really the last missing piece is support for functions.&lt;/p>
&lt;p>To that end, it seems the Sass-like &lt;a class="link" href="https://github.com/mcattx/postcss-define-function" target="_blank" rel="noopener"
>postcss-define-function&lt;/a> plugin for this hasn&amp;rsquo;t seen any love in a while — and I&amp;rsquo;d probably consider using &lt;a class="link" href="https://github.com/andyjansson/postcss-functions" target="_blank" rel="noopener"
>postcss-functions&lt;/a> which is a bit different in that it leans towards defining functions in JavaScript.&lt;/p>
&lt;p>If I found myself needing any other features that weren&amp;rsquo;t readily available via existing plugins I&amp;rsquo;d likely start considering a move to just go back to using Sass, but I think the above would cover just about all the functionality I&amp;rsquo;ve actually used over the past few years.&lt;/p>
&lt;p>&lt;strong>TL;DR&lt;/strong> &lt;a class="link" href="https://github.com/csstools/postcss-advanced-variables?tab=readme-ov-file" target="_blank" rel="noopener"
>postcss-advanced-variables&lt;/a> and &lt;a class="link" href="https://github.com/Scrum/postcss-map-get" target="_blank" rel="noopener"
>postcss-map-get&lt;/a> is &lt;em>probably&lt;/em> going to give you most of what you&amp;rsquo;re using Sass for today.&lt;/p>
&lt;h3 id="writing-custom-plugins">Writing custom plugins
&lt;/h3>&lt;p>While I haven&amp;rsquo;t found the need to do this myself, PostCSS also purports to make it fairly straightforward to &lt;a class="link" href="https://postcss.org/docs/writing-a-postcss-plugin" target="_blank" rel="noopener"
>write your own custom plugins&lt;/a>, which is a huge leap from being at the mercy of whatever functionality is offered by one of the pre-processor options.&lt;/p>
&lt;p>Chances are however that you&amp;rsquo;ll generally find what you&amp;rsquo;re after. There are even existing plugins &lt;a class="link" href="https://github.com/sebdeckers/postcss-imperial" target="_blank" rel="noopener"
>to let you use yards, feet and twips&lt;/a>! Don&amp;rsquo;t do that, though.&lt;/p></description></item></channel></rss>
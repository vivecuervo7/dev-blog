<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Isaac Dedini</title><link>https://vivecuervo7.github.io/dev-blog/categories/development/</link><description>Recent content in Development on Isaac Dedini</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Aug 2025 08:11:00 +1000</lastBuildDate><atom:link href="https://vivecuervo7.github.io/dev-blog/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>RAG to fine-tuning an LLM</title><link>https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +1000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/image.png" alt="Featured image of post RAG to fine-tuning an LLM" />&lt;p>A little over a week ago, I started toying with &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/" >running Large Language Models (LLMs) locally using Ollama&lt;/a>.&lt;/p>
&lt;p>Apparently, all that did was to get my head spinning with a few ideas. Largely, I was finding myself incredibly curious about the potential of running some of those smaller LLMs locally, and having each of them specialised in a specific domain.&lt;/p>
&lt;p>For context, I should probably clarify how I tend to find myself using LLMs.&lt;/p>
&lt;h2 id="the-use-case">The use case
&lt;/h2>&lt;p>I did have &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/" >a bit of a play with genuine vibe coding&lt;/a>, but quickly found that it wasn&amp;rsquo;t for me. I like understanding my codebase, and while certainly impressive that it could churn out functional code it a matter of minutes, I found it more often than not generated &lt;em>too&lt;/em> much. I found the sheer amount of code difficult to meaningfully review, and more often than not found myself blowing away all the changes even after a good half hour or so of prompting.&lt;/p>
&lt;p>AI has still found a home in my workflow however, but I find my use case to be mostly based around &amp;ldquo;I want this very specific thing, and I want it done roughly like this&amp;rdquo;. At a high level my workflow looks more like this:&lt;/p>
&lt;ul>
&lt;li>Creating a database migration
&lt;ul>
&lt;li>Manually create the file, add to context&lt;/li>
&lt;li>Prompt: &lt;em>Add a migration that adds a &lt;code>users&lt;/code> table with &lt;code>id&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>email&lt;/code> columns&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Creating the model / entity file
&lt;ul>
&lt;li>Manually create the file, add to context&lt;/li>
&lt;li>Add the migration file we created earlier to context&lt;/li>
&lt;li>Prompt: &lt;em>Create an entity that reflects this newly created table&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&amp;hellip;and so on.&lt;/p>
&lt;p>There&amp;rsquo;s a bit of manual work to say &amp;ldquo;this is where I want you to put the code&amp;rdquo;, and then letting AI run away with the code that needs to be added to that specific file. Which means, usually I want it to &lt;em>specifically&lt;/em> write SQL, or add a new SvelteKit endpoint, or maybe append a route to a .NET controller.&lt;/p>
&lt;p>I&amp;rsquo;m not really leveraging the capabilities of a model that is generally knowledgeable in all these things, all at once.&lt;/p>
&lt;h3 id="the-pain-point">The pain point
&lt;/h3>&lt;p>Honestly, this approach has been working for me. It very quickly gives me a chunk of code that is small enough to either quickly tick off or tweak to my liking, and then I can move on and not need to think about that file again.&lt;/p>
&lt;p>The problem I have consistently run into however, is that the training for most (all?) of these LLMs was done prior to the release of Svelte 5. And Svelte 5 brought significant changes to the syntax. As one can imagine, this amounted to a &lt;em>lot&lt;/em> of generated code that was just&amp;hellip; wrong.&lt;/p>
&lt;h3 id="the-litmus-test">The litmus test
&lt;/h3>&lt;p>Given that very clear and resounding pain point, I settled on one specific thing I wanted to achieve — something that the models I was using were just completely incapable of in their current state.&lt;/p>
&lt;blockquote>
&lt;p>Could I teach a model how to write in Svelte 5&amp;rsquo;s syntax?&lt;/p>&lt;/blockquote>
&lt;p>With my thoughts already occupied with this idea of having a handful of specialised, smaller LLMs, I figured this would be the perfect test.&lt;/p>
&lt;h3 id="the-potential-solutions">The potential solutions
&lt;/h3>&lt;p>There were a few different ways I could go about trying to solve this problem. To date, I hadn&amp;rsquo;t really leaned too heavily on GitHub Copilot&amp;rsquo;s instructions files, but I figured it would be the first stop.&lt;/p>
&lt;p>While that seemed a sane approach, I was very conscious of the fact that using smaller LLMs, I probably needed to be careful with context lengths. While this was likely less of a concern given my short-lived interactions with the LLM, it still felt like a sub-par solution.&lt;/p>
&lt;p>Enter a couple of terms that I had seen bandied about, but really at this point hadn&amp;rsquo;t understood. Namely, &lt;strong>system prompts&lt;/strong>, &lt;strong>Retrieval-Augmented Generation (RAG)&lt;/strong> and &lt;strong>fine-tuning&lt;/strong>.&lt;/p>
&lt;h3 id="the-reference-material">The reference material
&lt;/h3>&lt;p>After spending half a day trying to get an LLM to scrape some meaningful data off the Svelte documentation website, I discovered that the Svelte website actually has a page &lt;a class="link" href="https://svelte.dev/docs/llms" target="_blank" rel="noopener"
>specific to LLMs&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/homer-doh.gif"
width="480"
height="366"
srcset="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/homer-doh_hu_2908f4d5d232ede4.gif 480w, https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/homer-doh_hu_741fc5cfb016f9b0.gif 1024w"
loading="lazy"
alt="Not the last time I found myself saying that."
class="gallery-image"
data-flex-grow="131"
data-flex-basis="314px"
>&lt;/p>
&lt;p>I also discovered that this &lt;code>llms.txt&lt;/code> file is a &lt;a class="link" href="https://llmstxt.org/" target="_blank" rel="noopener"
>proposed standard&lt;/a>, and there&amp;rsquo;s a &lt;a class="link" href="https://directory.llmstxt.cloud/" target="_blank" rel="noopener"
>handy directory of products and companies&lt;/a> that have adopted it.&lt;/p>
&lt;p>Awesome! What really got me interested, however, was the presence of some text files that had the complete documentation, including compressed versions for smaller LLMs.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://svelte.dev/llms.txt" target="_blank" rel="noopener"
>/llms.txt&lt;/a> — a listing of the available files&lt;/li>
&lt;li>&lt;a class="link" href="https://svelte.dev/llms-full.txt" target="_blank" rel="noopener"
>/llms-full.txt&lt;/a> (~1 MB) — complete documentation for Svelte, SvelteKit and the CLI&lt;/li>
&lt;li>&lt;a class="link" href="https://svelte.dev/llms-medium.txt" target="_blank" rel="noopener"
>/llms-medium.txt&lt;/a> (~0.5 MB) — compressed documentation for use with medium context windows&lt;/li>
&lt;li>&lt;a class="link" href="https://svelte.dev/llms-small.txt" target="_blank" rel="noopener"
>/llms-small.txt&lt;/a> (45 KB) — highly compressed documentation for use with smaller context windows&lt;/li>
&lt;/ul>
&lt;h2 id="github-copilot-instructions">GitHub Copilot instructions
&lt;/h2>&lt;p>I won&amp;rsquo;t go too deep on this one. The short version is that, &lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/configure-custom-instructions/add-repository-instructions" target="_blank" rel="noopener"
>following the documentation&lt;/a>, I was able to essentially paste the contents of the &lt;code>llms-*.txt&lt;/code> file into &lt;code>copilot-instructions.md&lt;/code>. I actually got some really positive results with this approach. Certainly, once plugged into a fully-scaffolded project, it was able to generate some fairly accurate code.&lt;/p>
&lt;p>Surprisingly however, I got far better results with the &lt;em>smaller&lt;/em> &lt;code>llms-small.txt&lt;/code> file, which was only 45 KB in size. I figure that this was likely due to the limited context window of the smaller models, although truthfully I didn&amp;rsquo;t really know what to expect if I exceeded that — assuming this was even the case.&lt;/p>
&lt;p>I definitely considered this to be a huge win, and honestly I could have likely stopped here.&lt;/p>
&lt;p>In the spirit of full disclosure, I did run this with GPT and Claude as well, as the local models don&amp;rsquo;t seem to be capable of actually generating files etc. Claude was unsurprisingly by far the standout here, but not without its problems. I&amp;rsquo;ll summarise the experience with each of them below.&lt;/p>
&lt;p>Generally speaking however, one pleasant experience was that I no longer needed to specify which framework the component needed to be written for. I used a very simple prompt of &lt;em>&amp;ldquo;Create a counter component&amp;rdquo;&lt;/em>. These were all run via GitHub Copilot, with the scaffolded project loaded into VS Code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Model&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Llama3.2 3B&lt;/td>
&lt;td>This one pretty much flopped. The code it spat out didn&amp;rsquo;t use Svelte 5 syntax, and didn&amp;rsquo;t appear to even use &lt;a class="link" href="https://svelte.dev/docs/svelte/legacy-reactive-assignments" target="_blank" rel="noopener"
>legacy reactive statements&lt;/a>. I&amp;rsquo;m not being too critical of it at this point however, as it&amp;rsquo;s easily the smallest model used.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Qwen 3 8B&lt;/td>
&lt;td>I&amp;rsquo;ve honestly found Qwen to be a little hit and miss in GitHub Copilot specifically, often getting caught up in it&amp;rsquo;s reasoning, getting halfway through a &lt;code>&amp;lt;think&amp;gt;&lt;/code> block and just&amp;hellip; stopping. That said, the one time it actually generated the code I wanted, it was spot on and told me to put in in the correct place.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GPT-4.1&lt;/td>
&lt;td>Created a &lt;em>very&lt;/em> simple counter component, but put it in the wrong place. Additionally, it was initially created with botched &lt;code>&amp;lt;script&amp;gt;&lt;/code> tags, and when it finished trying to fix them they were just gone — resulting in code that wouldn&amp;rsquo;t even compile.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claude Sonnet 4&lt;/td>
&lt;td>I guess someone had to show off, and that someone was Claude. By a &lt;em>long&lt;/em> way — but not necessarily in a &lt;em>good&lt;/em> way. Claude checked the project structure, then created the component at the right location. All the correct syntax was used, even cross-referencing other components to confirm. But, in typical Claude fashion, the component was a big 240-line block of code complete with styling and all of the functionality that I &lt;em>didn&amp;rsquo;t&lt;/em> want.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I decided to push Claude a bit further here and managed to vibe code my way to a full-blown storefront for a shoe store. I was actually pretty surprised at how easily I could follow along this time — but truth be told, I have been working towards a very succinct stack which meant there was just less code to review. Styling however did get a bit messy, and there were a lot of follow-up prompts to try and get it Claude to keep that manageable.&lt;/p>
&lt;p>And really, that latter point is one of the main reasons why I didn&amp;rsquo;t want to just stop here. If I were to just continue with this pattern, I was going to be spending all my time fighting against Claude, trying to keep it in check.&lt;/p>
&lt;p>Additionally, was I going to just keep needing to add more and more documentation to the instructions? Was there even an &lt;code>llms-*.txt&lt;/code> file out there for Tailwind? How do I provide this same information to &lt;a class="link" href="https://openwebui.com/" target="_blank" rel="noopener"
>Open WebUI&lt;/a>?&lt;/p>
&lt;h2 id="retrieval-augmented-generation-rag">Retrieval-Augmented Generation (RAG)
&lt;/h2>&lt;p>I&amp;rsquo;m going to be completely honest here — I&amp;rsquo;m not entirely sure how this is supposed to work in the context of &lt;em>both&lt;/em> GitHub Copilot and Open WebUI, especially when we&amp;rsquo;re talking about having a highly-specialised model.&lt;/p>
&lt;p>My end-goal here was to have a single, unified experience that would be consistent across both GitHub Copilot and Open WebUI. While conceptually speaking RAG isn&amp;rsquo;t overly complex, the best I could really find here was to create a &lt;a class="link" href="https://docs.openwebui.com/features/workspace/knowledge/" target="_blank" rel="noopener"
>knowledge base&lt;/a> in Open WebUI, and have it reference the knowledge base itself when generating for a prompt.&lt;/p>
&lt;p>Open WebUI also allows us to &lt;a class="link" href="https://docs.openwebui.com/tutorials/tips/rag-tutorial#create-a-custom-model-with-the-knowledge-base" target="_blank" rel="noopener"
>create new models&lt;/a> that have a system prompt, as well as a constant reference to a knowledge base.&lt;/p>
&lt;p>This actually worked &lt;em>really&lt;/em> well, honestly. I wasn&amp;rsquo;t sure that this was conceptually any different to GitHub Copilot&amp;rsquo;s instructions, but it certainly did a far better job of just doing the thing I wanted it to do. Maybe GitHub Copilot was just getting in the way? Anyhow, it felt like the &amp;ldquo;other side of the coin&amp;rdquo; to GitHub Copilot&amp;rsquo;s instructions, albeit a little shinier, despite not being plugged into my code editor.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/open-webui-svelte.png"
width="927"
height="377"
srcset="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/open-webui-svelte_hu_c9b1db40060a26ab.png 480w, https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/open-webui-svelte_hu_8e8f257b7423631c.png 1024w"
loading="lazy"
alt="qwen3:8b referencing the Svelte documentation’s llms-small.txt file"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="590px"
>&lt;/p>
&lt;p>I should also note that when I tried to split up this file and provide it with a larger number of smaller files, it often struggled to find the &lt;em>right&lt;/em> files and would start returning plainly incorrect responses. As with GitHub Copilot instructions, this just didn&amp;rsquo;t offer a portable, consistent experience across different interfaces.&lt;/p>
&lt;p>In the context of GitHub Copilot specifically, I had to keep telling it to look up the documentation, and even then it often just decided to do things it&amp;rsquo;s own way.&lt;/p>
&lt;h2 id="system-prompt">System prompt
&lt;/h2>&lt;p>So, feeling like I&amp;rsquo;d gotten &lt;em>somewhere&lt;/em> with the two approaches above, I really wanted to try and consolidate this into a single, consistent model that both GitHub Copilot and Open WebUI could use.&lt;/p>
&lt;p>Enter Ollama&amp;rsquo;s Modelfiles. I &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/#modelfiles" >touched on these briefly&lt;/a> while first looking into running models locally, but essentially they provide a way for me to create a completely new model based on an &lt;em>existing&lt;/em> model, with some additional tweaks for things such as parameters, &lt;strong>system prompts&lt;/strong> and templates. The Modelfile reference can be found &lt;a class="link" href="https://ollama.readthedocs.io/en/modelfile/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>Considering the success I&amp;rsquo;d had with the two earlier approaches, I figured that what I really needed was to just have a model that always had this in context, right? That&amp;rsquo;s effectively what was happening with the two separate approaches — although one was being very explicit in telling GitHub Copilot to &lt;em>always&lt;/em> consider the instructions, and the other was giving Open WebUI access to the file and &lt;em>hoping&lt;/em> that it always referenced it.&lt;/p>
&lt;p>So, it seemed to make sense that I could just whack the contents of &lt;code>llms-small.txt&lt;/code> into the system prompt of a new model, and then let both GitHub Copilot and Open WebUI use it directly, with no additional context required.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">FROM qwen3:8b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SYSTEM {contents of llms-small.txt}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Specify the model, and specify the system prompt, which was just a dump of the whole text file. Running the command below then created the new model. Piece of cake!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">ollama create svelte-system-prompt -f ./Modelfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Surprisingly, this just didn&amp;rsquo;t quite work as well as I&amp;rsquo;d hoped. Not knowing too much about how GitHub Copilot&amp;rsquo;s instructions or Open WebUI&amp;rsquo;s RAG worked in terms of how much weight was given to the additional context, I figured that this might just have been applied a little differently.&lt;/p>
&lt;p>In any case, this was a bit of a flop altogether.&lt;/p>
&lt;h2 id="fine-tuning">Fine-tuning
&lt;/h2>&lt;p>All of my reading up until this point had gradually leaned towards this eventuality. With my previous endeavours failing — or least not quite hitting the mark — I decided to look into what was actually required to fine-tune a model.&lt;/p>
&lt;p>I&amp;rsquo;ll try to touch on the various tools etc. in order here. This isn&amp;rsquo;t quite how it panned out in practice, but it should provide a good overview of what&amp;rsquo;s involved.&lt;/p>
&lt;p>Additionally, I decided to move away from trying to train it on Svelte here. I did give it a good crack at first, with varying levels of success. Ultimately I was left unsure as to whether the dataset I had created was actually any good, or whether the models I was using were just too small. Different training methods added another variable into the mix, and on top of that, with Qwen 3 being a reasoning model I made a bit of a mess trying to insert reasoning data into the training dataset.&lt;/p>
&lt;p>Anyway, I decided to train it on a much more focused topic — &lt;strong>the dimensions and markings of a rugby league field&lt;/strong>.&lt;/p>
&lt;p>I grabbed a PDF from &lt;a class="link" href="https://www.harrodsport.com/uploads/wysiwyg/file/rugby-league-pitch-dimensions-pdf.pdf" target="_blank" rel="noopener"
>here&lt;/a>, and used that as the basis for my training dataset.&lt;/p>
&lt;h3 id="datasets">Datasets
&lt;/h3>&lt;p>Of course, the easiest way to create a dataset for training an LLM, was to use an LLM. I tried getting a couple of models to scrape the PDF, with ChatGPT being the quickest way to generate a large file.&lt;/p>
&lt;h4 id="metas-synthetic-data-kit">Meta&amp;rsquo;s Synthetic Data Kit
&lt;/h4>&lt;p>I stumbled across &lt;a class="link" href="https://github.com/meta-llama/synthetic-data-kit" target="_blank" rel="noopener"
>Meta&amp;rsquo;s Synthetic Data Kit&lt;/a> which is purpose built for creating these datasets &lt;em>far&lt;/em> too late in the piece, however I found that I wasn&amp;rsquo;t able to get a meaningful dataset anyhow. It simply required a model that was too large to run on my machine.&lt;/p>
&lt;p>I won&amp;rsquo;t go into details on how to run this, but it looks like an effective tool for slurping up large amounts of data and spitting out a usable dataset.&lt;/p>
&lt;p>It just might need either a beefy setup, or using a rented workstation from services like &lt;a class="link" href="https://vast.ai/" target="_blank" rel="noopener"
>Vast.ai&lt;/a>.&lt;/p>
&lt;h4 id="formats">Formats
&lt;/h4>&lt;p>The file itself needs to be a &lt;code>jsonl&lt;/code> file, which is essentially a file with a JSON object per line. The file I ended up with used the &lt;strong>messages&lt;/strong> format, and looked like this (multiplied by many, many rows):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;messages&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Summarize the dimensions of a rugby league field.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;assistant&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A rugby league field is 68 metres wide, and 112-122 metres long.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, a couple of things to note here.&lt;/p>
&lt;p>There are actually a few ways to format the dataset. Primarily though, and as might be evident simply by looking at that example, the dataset is essentially a collection of objects that describe a conversation.&lt;/p>
&lt;p>The other types are a little simpler, but I initially opted for the more conversational &lt;strong>messages&lt;/strong> format. It is however worth noting that this format requires specific models — or rather, the particular models need to be tuned appropriately. The base llama models for example did not work out of the box, and required me to use the &lt;code>instruct&lt;/code> tuned versions.&lt;/p>
&lt;p>In addition to the &lt;strong>messages&lt;/strong> format above, there is also the &lt;strong>completions&lt;/strong> format:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;prompt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Summarize the dimensions of a rugby league field.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;completion&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A rugby league field is 68 metres wide, and 112-122 metres long.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And the &lt;strong>text&lt;/strong> format:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;A rugby league field is 68 metres wide, and 112-122 metres long.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="files-required">Files required
&lt;/h4>&lt;p>Now, training data on its own is all well and good, but we also need verification data. Since we&amp;rsquo;re using &lt;code>mlx-lm&lt;/code> for this (sorry, Windows folks — this one is Apple only, but there are options that should work just as well on Windows), we&amp;rsquo;ll need the following files.&lt;/p>
&lt;ul>
&lt;li>&lt;code>train.jsonl&lt;/code>&lt;/li>
&lt;li>&lt;code>valid.jsonl&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>valid&lt;/code> data should be smaller than the training data itself — I&amp;rsquo;ve seen a few recommendations, but I just opted for around 10-20% of the training data size. A &lt;code>test.jsonl&lt;/code> file is also recommended, which can be used to evaluate the model after training.&lt;/p>
&lt;h3 id="mlx-lm">mlx-lm
&lt;/h3>&lt;p>Using &lt;code>mlx-lm&lt;/code> was actually one of the easier parts to get right. The setup did require using Python, which is always fun considering how infrequently I use it, but once I jogged the memory on how to set up a virtual environment, we had the ball rolling.&lt;/p>
&lt;p>Before we get into the individual commands used, it&amp;rsquo;s worth mentioning that &lt;code>mlx-lm&lt;/code> can pull models directly from &lt;a class="link" href="https://huggingface.co/" target="_blank" rel="noopener"
>Hugging Face&lt;/a>, meaning we don&amp;rsquo;t need to download models, or figure out where they might be stored. It &lt;em>does&lt;/em> however mean that the names might looks a little different to what we&amp;rsquo;re used to seeing with Ollama, but rest assured they&amp;rsquo;re all talking about the same models.&lt;/p>
&lt;h4 id="installation">Installation
&lt;/h4>&lt;p>Running &lt;code>pip install mlx-lm&lt;/code> gets us the basic package, and we can actually start playing with models right off the bat with &lt;code>mlx_lm.generate --prompt &amp;quot;Hello&amp;quot;&lt;/code>. Starting a continuous chat can be kicked off with &lt;code>mlx_lm.chat&lt;/code>.&lt;/p>
&lt;p>I&amp;rsquo;m not really sure which model gets used when you don&amp;rsquo;t supply the argument, but providing a &lt;code>--model&lt;/code> argument will use the specified model. As mentioned, these should can be repositories on Hugging Face, so to grab the Qwen3 1.7B model as an example, we simply need to run &lt;code>mlx_lm.generate --model qwen/qwen3-1.7b --prompt &amp;quot;Hello&amp;quot;&lt;/code>.&lt;/p>
&lt;h4 id="training">Training
&lt;/h4>&lt;p>Now that we&amp;rsquo;re done playing with our toys, it&amp;rsquo;s time to do our best Sid from Toy Story impersonation and start messing with the guts of our models.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/sid-workshop.gif"
width="498"
height="373"
srcset="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/sid-workshop_hu_fae35b09a1c591aa.gif 480w, https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/sid-workshop_hu_69cac3ea5403e8a7.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>It&amp;rsquo;s probably a good time to talk about what &lt;em>type&lt;/em> of training this is. Or, types. And full disclaimer, this is where I started to get a little lost — suffice to say that I&amp;rsquo;m still not entirely sure how much of a difference there is between the different types of training that &lt;code>mlx-lm&lt;/code> offers beyond a very rough idea.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Full&lt;/td>
&lt;td>Updates all of the model weights (or parameters) of the pre-trained model. &lt;em>Very&lt;/em> resource intensive, and risks &amp;ldquo;over-fitting&amp;rdquo;, causing a model to &amp;ldquo;forget&amp;rdquo; some of its original data.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LoRA&lt;/td>
&lt;td>&lt;strong>Low-Rank Adaptation&lt;/strong>. We track the &lt;em>changes&lt;/em> we want to make to the weights. We can also freeze some of the layers to reduce the number of parameters we&amp;rsquo;re adjusting. Far more efficient while fine-tuning.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA&lt;/td>
&lt;td>&lt;strong>Weight-Decomposed Low-Rank Adaptation&lt;/strong>. Too complicated for me to understand the differences, but the consensus seems to be that it it provides more accurate results than LoRA with similar efficiency gains. More information &lt;a class="link" href="https://developer.nvidia.com/blog/introducing-dora-a-high-performing-alternative-to-lora-for-fine-tuning/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>QLoRA is also available, which is simply LoRA that works on quantized models. &lt;code>mlx-lm&lt;/code> will automatically use this if our &lt;code>--model&lt;/code> argument points to a quantized model.&lt;/p>
&lt;p>Now, this video does a great job of explaining a bunch of things that are well and truly over my head — it&amp;rsquo;s definitely worth a watch if you&amp;rsquo;re interested in the details.&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/t1caDsMzWBk"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>I tried both full and LoRA training to figure out which was best for my use case. Considering that I wanted a highly specialized model, I wasn&amp;rsquo;t sure if over-fitting would necessarily be the biggest concern.&lt;/p>
&lt;p>In any case, the command to run &lt;strong>full&lt;/strong> fine-tuning is as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mlx_lm.lora --train &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --model qwen/qwen3-1.7b &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --data data &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --iters &lt;span class="m">200&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --fine-tune-type full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can easily switch that last argument to &lt;code>lora&lt;/code> (or &lt;code>dora&lt;/code>) to use the other types of training. This introduces some additional arguments we can pass, but we can leave them at their defaults for now.&lt;/p>
&lt;p>It is worth mentioning here that this is a resource-intensive task, and more than once I found myself running out of memory and watching the training process crash. &lt;a class="link" href="https://github.com/ml-explore/mlx-lm/blob/e9b1649662d261e8eefea506c705a7370bb92449/mlx_lm/LORA.md#memory-issues" target="_blank" rel="noopener"
>This page&lt;/a> details a few methods to try and reduce the memory usage, but I found that the biggest impact was simply to use a smaller model — bearing in mind that this will also reduce the quality of the final model.&lt;/p>
&lt;p>Run the command with your desired combination of parameters, and we should end up with a folder called &lt;code>adapters&lt;/code>. Inside, is the result of our fine-tuning in the form of a Safetensor adapter!&lt;/p>
&lt;p>The console output should also look something like the below.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Loading pretrained model
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Fetching &lt;span class="m">9&lt;/span> files: 100%&lt;span class="p">|&lt;/span>██████████████████████████████████████████████████████████████████████████████████████████████████████&lt;span class="p">|&lt;/span> 9/9 &lt;span class="o">[&lt;/span>00:00&amp;lt;00:00, 13217.34it/s&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Loading datasets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Training
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Trainable parameters: 0.056% &lt;span class="o">(&lt;/span>0.967M/1720.575M&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting training..., iters: &lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Calculating loss...: 100%&lt;span class="p">|&lt;/span>██████████████████████████████████████████████████████████████████████████████████████████████████████&lt;span class="p">|&lt;/span> 25/25 &lt;span class="o">[&lt;/span>00:11&amp;lt;00:00, 2.22it/s&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 1: Val loss 5.646, Val took 11.289s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 10: Train loss 4.538, Learning Rate 1.000e-05, It/sec 1.376, Tokens/sec 317.131, Trained Tokens 2304, Peak mem 4.695 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 20: Train loss 2.579, Learning Rate 1.000e-05, It/sec 1.281, Tokens/sec 303.100, Trained Tokens 4671, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 30: Train loss 1.801, Learning Rate 1.000e-05, It/sec 1.545, Tokens/sec 314.796, Trained Tokens 6708, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 40: Train loss 1.522, Learning Rate 1.000e-05, It/sec 1.508, Tokens/sec 336.666, Trained Tokens 8941, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 50: Train loss 1.425, Learning Rate 1.000e-05, It/sec 1.514, Tokens/sec 313.347, Trained Tokens 11010, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 60: Train loss 1.261, Learning Rate 1.000e-05, It/sec 1.577, Tokens/sec 341.066, Trained Tokens 13173, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 70: Train loss 1.162, Learning Rate 1.000e-05, It/sec 1.348, Tokens/sec 318.090, Trained Tokens 15532, Peak mem 5.034 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 80: Train loss 1.168, Learning Rate 1.000e-05, It/sec 1.243, Tokens/sec 324.718, Trained Tokens 18144, Peak mem 5.429 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 90: Train loss 1.077, Learning Rate 1.000e-05, It/sec 1.415, Tokens/sec 318.347, Trained Tokens 20394, Peak mem 5.429 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Calculating loss...: 100%&lt;span class="p">|&lt;/span>██████████████████████████████████████████████████████████████████████████████████████████████████████&lt;span class="p">|&lt;/span> 25/25 &lt;span class="o">[&lt;/span>00:11&amp;lt;00:00, 2.18it/s&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 100: Val loss 1.241, Val took 11.401s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 100: Train loss 0.746, Learning Rate 1.000e-05, It/sec 1.623, Tokens/sec 339.464, Trained Tokens 22486, Peak mem 5.429 GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Iter 100: Saved adapter weights to adapters/adapters.safetensors and adapters/0000100_adapters.safetensors.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Saved final weights to adapters/adapters.safetensors.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lots of useful information, but critically we want to keep an eye on the &lt;strong>Train / Val loss&lt;/strong> values (training and validation loss, respectively). Typically, the lower the better, these essentially indicate how well the model is learning.&lt;/p>
&lt;p>My understanding is that we want the validation loss to be close to the the training loss. If the validation loss is significantly lower than the training loss, it indicates under-fitting (lower accuracy relative to the training data), while a significantly higher validation loss indicates over-fitting (higher accuracy relative to the training data, at the cost of existing knowledge).&lt;/p>
&lt;h4 id="fusing">Fusing
&lt;/h4>&lt;p>Honestly, I prefer to refer to this as &amp;ldquo;baking&amp;rdquo; the adapter in. Apparently the community is dead-set on calling it &amp;ldquo;fusing&amp;rdquo;. That just reminds me of an over-protected childhood where I wasn&amp;rsquo;t allowed to watch Dragonball Z.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/fusion.gif"
width="480"
height="360"
srcset="https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/fusion_hu_b58d9ade0b479220.gif 480w, https://vivecuervo7.github.io/dev-blog/p/fine-tuning-an-llm/images/fusion_hu_9b6255783841671.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>Moving on, this step isn&amp;rsquo;t necessarily required, depending on the model we&amp;rsquo;ve used. I haven&amp;rsquo;t tried this with one of the compatible models, but Ollama&amp;rsquo;s &lt;a class="link" href="https://ollama.readthedocs.io/en/modelfile/#safetensor-adapter" target="_blank" rel="noopener"
>Modelfile reference&lt;/a> does mention the ability to simply reference a Safetensor adapter, which is what we get when we run the &lt;code>mlx_lm.lora --train&lt;/code> command above.&lt;/p>
&lt;p>Since neither of the models I was using were compatible, I did need to produce a fused model. We can actually run the model we used to create the adapter with or without the adapter attached to it (add an &lt;code>--adapter-path&lt;/code> argument to a &lt;code>mlx_lm.generate&lt;/code> command to use the adapter), but this wasn&amp;rsquo;t going to give me a model that could be run by Ollama.&lt;/p>
&lt;p>To combine the model and adapter, we run the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mlx_lm.fuse --model qwen/qwen3-1.7b &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --adapter-path adapters &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --save-path ./model
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And, once again we&amp;rsquo;ll get a folder called &lt;code>model&lt;/code>, which contains a &lt;em>bunch&lt;/em> of files. This is your model!&lt;/p>
&lt;p>If we&amp;rsquo;re itching to see how it works, we can pass &lt;code>--model ./model&lt;/code> to &lt;code>mlx_lm.generate&lt;/code> or &lt;code>mlx_lm.chat&lt;/code>, and it will use the newly created model. Good for a quick turnaround for testing.&lt;/p>
&lt;h3 id="llamacpp">llama.cpp
&lt;/h3>&lt;p>Once again, this may be unnecessary based on your model. The &lt;a class="link" href="https://ollama.readthedocs.io/en/modelfile/#build-from-a-safetensors-model" target="_blank" rel="noopener"
>Modelfile reference&lt;/a> also mentions being able to build from a Safetensors model directly. You&amp;rsquo;d think at this point I would have just made sure to pick one from this list, right?&lt;/p>
&lt;p>Of course, only one of my models was supported. If it&amp;rsquo;s not supported, you&amp;rsquo;ll see something like below when you try to run &lt;code>ollama create&lt;/code>. If it is supported, it will simply perform the &lt;strong>conversion&lt;/strong> itself, and you&amp;rsquo;ll end up with a model that is listed and runnable by Ollama.&lt;/p>
&lt;div class="highlight error">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Error: unsupported architecture &amp;#34;Qwen3ForCausalLM&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And, that&amp;rsquo;s the key word right there. &lt;strong>Conversion&lt;/strong>. To what, exactly? A &lt;code>.gguf&lt;/code> file! Which stands for the mouthful of syllables that is &amp;ldquo;GPT-Generated Unified Format&amp;rdquo;. Bottom line is, it&amp;rsquo;s what Ollama wants.&lt;/p>
&lt;h4 id="installation-1">Installation
&lt;/h4>&lt;p>There are a few options for installation, as mentioned on the &lt;a class="link" href="https://github.com/ggml-org/llama.cpp?tab=readme-ov-file#quick-start" target="_blank" rel="noopener"
>&lt;code>llama.cpp&lt;/code> repository&lt;/a>.&lt;/p>
&lt;p>I didn&amp;rsquo;t have much luck getting the homebrew version to work, so I ended up cloning the repository and building it myself (they have &lt;a class="link" href="https://github.com/ggml-org/llama.cpp/blob/master/docs/build.md" target="_blank" rel="noopener"
>instructions for that&lt;/a>, too).&lt;/p>
&lt;h4 id="converting-to-gguf">Converting to .gguf
&lt;/h4>&lt;p>The bit we really care about is being able to convert the Safetensor model into a &lt;code>.gguf&lt;/code> file. The script that achieves that is called &lt;code>convert_hf_to_gguf.py&lt;/code>. I found it easiest to just run this from the directory that had our model in it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">python ../llama.cpp/convert_hf_to_gguf.py model --outfile model.gguf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A keen eye might also notice a script called &lt;code>convert_lora_to_gguf.py&lt;/code> sitting next to &lt;code>convert_hf_to_gguf.py&lt;/code>. I had no success in trying to use this, but the suggestion is that we could actually convert the &lt;em>adapter&lt;/em> itself to a &lt;code>.gguf&lt;/code> and pass that to Ollama via a Modelfile&amp;rsquo;s &lt;code>ADAPTER&lt;/code> instruction, saving us the need to fuse the adapter into the model.&lt;/p>
&lt;p>Anyway, once we have our &lt;code>model.gguf&lt;/code> file, we can now create a model in Ollama that uses it.&lt;/p>
&lt;h3 id="ollama-create">ollama create
&lt;/h3>&lt;p>We&amp;rsquo;ve already seen how to create a model for Ollama, but now we can use the &lt;code>.gguf&lt;/code> file we created above. We do this by creating a &lt;code>Modelfile&lt;/code> in the same directory as the &lt;code>.gguf&lt;/code> file, and referencing our brand spanking new &lt;code>model.gguf&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">FROM ./model.gguf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The command to create our model doesn&amp;rsquo;t change, so we run that. With a more appropriate name.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">ollama create eight-in-a-row -f ./Modelfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ollama list&lt;/code> should now show us our model, and we can use it as we would any other model we&amp;rsquo;ve pulled down from Ollama&amp;rsquo;s library, showing up in both GitHub Copilot and Open WebUI.&lt;/p>
&lt;h4 id="chat-template">Chat template
&lt;/h4>&lt;p>The first big problem I noticed came when I tried to run this. And frustratingly, it &lt;em>only&lt;/em> happened when I tried to run it via Ollama.&lt;/p>
&lt;p>I was getting some really fun output, where a simple prompt of &amp;ldquo;Hello&amp;rdquo; would return a response along the lines of &amp;ldquo;, I&amp;rsquo;m going to&amp;hellip;&amp;rdquo; and on and on. Noticing the little comma sneaking in there at the start of the response, it took some pain and searching around before I learned all about stop sequences.&lt;/p>
&lt;p>It was only after I spotted someone else showing the output of their model (via &lt;code>ollama show&lt;/code>) that I noticed a difference between theirs and mine. Theirs had the &lt;code>TEMPLATE&lt;/code> instruction filled in for their Modelfile. I don&amp;rsquo;t know why it hadn&amp;rsquo;t dawned on me earlier, but the example &lt;code>TEMPLATE&lt;/code> instruction in the &lt;a class="link" href="https://ollama.readthedocs.io/en/modelfile/#template" target="_blank" rel="noopener"
>Modelfile reference&lt;/a> looked a &lt;em>lot&lt;/em> like the &lt;code>template&lt;/code> file &lt;a class="link" href="https://ollama.com/library/qwen3:1.7b/blobs/ae370d884f10" target="_blank" rel="noopener"
>in the Ollama library&lt;/a>.&lt;/p>
&lt;p>Pasting the contents of that file directly into the &lt;code>TEMPLATE&lt;/code> instruction of my Modelfile, I was able to get the model to respond as expected. After much pain and suffering, I finally had it working!&lt;/p>
&lt;h4 id="parameters">Parameters
&lt;/h4>&lt;p>While I&amp;rsquo;m not entirely sure how much of a difference it makes, I did also note that running &lt;code>ollama show&lt;/code> against the original model had a few parameters set. I&amp;rsquo;m not entirely sure if they were completely necessary, nor what impact they each have — I largely noticed them when I was looking to try and explicitly set my stop sequences via &lt;code>PARAMETER stop &amp;lt;|im_end|&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Anyhow, I copied the parameter values from the original model&amp;rsquo;s &lt;a class="link" href="https://ollama.com/library/qwen3:1.7b/blobs/cff3f395ef37" target="_blank" rel="noopener"
>Ollama library page&lt;/a>. Omitting the &lt;code>stop&lt;/code> parameters didn&amp;rsquo;t seem to have any impact, but I figured that starting with the remaining values set to those of the original model probably wouldn&amp;rsquo;t be the worst idea.&lt;/p>
&lt;h2 id="results">Results
&lt;/h2>&lt;p>To give everyone a level playing field, I decided to scrap all the models I&amp;rsquo;d been playing with, and really compare these properly. I settled on a consistent set of parameters, and ran the same prompt against each of the models, with the same datasets. I was seeing enough similarity between &lt;strong>LoRA&lt;/strong> and &lt;strong>DoRA&lt;/strong> training that I didn&amp;rsquo;t feel the need to run both of them against each model, so I decided to just run &lt;strong>Full&lt;/strong> and &lt;strong>DoRA&lt;/strong> training for each model.&lt;/p>
&lt;p>Each of the models would receive the same prompt, with the response pasted in, giving each model up to three attempts and picking the best response. I&amp;rsquo;ll indicate if this was the case in the results below.&lt;/p>
&lt;p>Here are the datasets used, in the &lt;strong>messages&lt;/strong> format:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="files/train.jsonl" >train.jsonl&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="files/valid.jsonl" >valid.jsonl&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As for the actual parameters, I ran each with &lt;strong>200 iterations&lt;/strong> and a &lt;strong>batch size of 1&lt;/strong>. For &lt;strong>DoRA&lt;/strong> training, I also limited it to training on &lt;strong>4 layers&lt;/strong>. This was very focused around reducing the memory usage, as to date I had watched a few training processes crash due to running out of memory. Later on, I do look at the impact of changing the number of layers.&lt;/p>
&lt;h3 id="the-prompt">The prompt
&lt;/h3>&lt;p>The prompt used will be &lt;strong>&lt;em>&amp;ldquo;How big is a rugby league field?&amp;rdquo;&lt;/em>&lt;/strong>.&lt;/p>
&lt;p>For reference, the answer is &lt;strong>68m wide&lt;/strong>, and &lt;strong>112-122m long&lt;/strong>.&lt;/p>
&lt;h3 id="per-model-results">Per-model results
&lt;/h3>&lt;p>In an effort to keep the table headers short, they have been abbreviated. I&amp;rsquo;ll also omit any reasoning returned from the Qwen 3 models, as it was generally quite long and honestly what we &lt;em>really&lt;/em> care about is the end result.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Type&lt;/strong>: The type of training used, as described above&lt;/li>
&lt;li>&lt;strong>Format&lt;/strong>: The format of the dataset used for training&lt;/li>
&lt;li>&lt;strong>P%&lt;/strong>: The percentage of total model parameters trained&lt;/li>
&lt;li>&lt;strong>TLoss&lt;/strong>: Training loss reported by MLX&lt;/li>
&lt;li>&lt;strong>VLoss&lt;/strong>: Validation loss reported by MLX&lt;/li>
&lt;li>&lt;strong>Mem&lt;/strong>: Peak memory used while training the model&lt;/li>
&lt;/ul>
&lt;h4 id="qwen-3--17b">Qwen 3 — 1.7B
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Base&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;em>[Truncated]&lt;/em> A rugby league field is a rectangular area measuring 90 meters (300 feet) in length and 50 meters (164 feet) in width. The field is divided into two halves by a 22-meter (72-foot) line running parallel to the goal line, which separates the two halves. &lt;em>[&amp;hellip;]&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Full&lt;/strong>&lt;/td>
&lt;td>&lt;strong>47%&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.109&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.315&lt;/strong>&lt;/td>
&lt;td>&lt;strong>9.2GB&lt;/strong>&lt;/td>
&lt;td>&lt;strong>The width of a rugby league field is 68 meters.&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA&lt;/td>
&lt;td>0.014%&lt;/td>
&lt;td>1.448&lt;/td>
&lt;td>1.487&lt;/td>
&lt;td>3.8GB&lt;/td>
&lt;td>The pitch of a rugby league field is approximately 100 meters long.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="qwen-3--4b">Qwen 3 — 4B
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem (GB)&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Base&lt;/strong>&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;em>[Truncated]&lt;/em> A rugby league field is a rectangular playing area with the following standard dimensions: Length: 100 meters (approximately 109.36 yards); &lt;strong>Width: 68 meters&lt;/strong> (approximately 74.37 yards) &lt;em>[&amp;hellip;]&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Full*&lt;/td>
&lt;td>40.147%&lt;/td>
&lt;td>0.158&lt;/td>
&lt;td>0.289&lt;/td>
&lt;td>16.5GB&lt;/td>
&lt;td>The dimensions of a rugby league field are between 122 and 182 meters.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA&lt;/td>
&lt;td>0.009%&lt;/td>
&lt;td>1.055&lt;/td>
&lt;td>1.108&lt;/td>
&lt;td>8.5GB&lt;/td>
&lt;td>A rugby league field is 100 meters long and 60 meters wide. The pitch is 100 meters long, and the width is 60 meters. The goal posts are 10 meters apart, and the crossbar is 4 meters wide.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* I had to limit iterations to 100 for the 3B model, as it was running out of memory&lt;/p>
&lt;h4 id="qwen-3--8b">Qwen 3 — 8B
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem (GB)&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Base&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;em>[Truncated]&lt;/em> A rugby league field has specific dimensions that are standardized for competition. Here&amp;rsquo;s a concise breakdown: Standard Dimensions: Length: 100 meters (328 feet); Width: 53 meters (174 feet) &lt;em>[&amp;hellip;]&lt;/em>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Full*&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA**&lt;/td>
&lt;td>0.005%&lt;/td>
&lt;td>1.185&lt;/td>
&lt;td>1.212&lt;/td>
&lt;td>17GB&lt;/td>
&lt;td>&lt;em>[Truncated]&lt;/em> The pitch dimensions for rugby league are standardized. Here&amp;rsquo;s the breakdown: &lt;strong>Width: 68 meters&lt;/strong>; Length: 126 meters &lt;em>[&amp;hellip;]&lt;/em>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* Unsurprisingly, this one was never going to fit into the meager 24GB of memory I have on this machine&lt;/p>
&lt;p>** While I just managed to get the full fine-tuning in, I had to quantize the model to be able to run it on my machine&lt;/p>
&lt;h4 id="llama-32--1b">Llama 3.2 — 1B
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Base&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;em>[Truncated]&lt;/em> Rugby League fields are typically smaller than American football or Australian Rules football fields. &lt;em>[&amp;hellip;]&lt;/em> Keep in mind that different countries or regions might have slightly varying field sizes, but 100m x 70m is the standard for rugby league fields worldwide.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Full&lt;/strong>&lt;/td>
&lt;td>&lt;strong>78.745%&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.0077&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.178&lt;/strong>&lt;/td>
&lt;td>&lt;strong>9.7GB&lt;/strong>&lt;/td>
&lt;td>&lt;strong>The total length of a rugby league field is between 112 and 122 meters.&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA&lt;/td>
&lt;td>0.018%&lt;/td>
&lt;td>0.871&lt;/td>
&lt;td>0.942&lt;/td>
&lt;td>2.8GB&lt;/td>
&lt;td>The size of a rugby league field is typically 130-150 yards (120-137 meters) long. The width can vary, but the most common width is around 55-65 yards (50-59 meters).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="llama-32--3b">Llama 3.2 — 3B
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem (GB)&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Base&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>A rugby league field, also known as a rugby pitch or oval, measures 100 meters (328 feet) long and 70 meters (230 feet) wide. The field is oval in shape, with the goalposts at each end of the field, and the try lines marking the boundaries of the playing area.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Full*&lt;/strong>&lt;/td>
&lt;td>&lt;strong>50.135%&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.096&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.193&lt;/strong>&lt;/td>
&lt;td>&lt;strong>15GB&lt;/strong>&lt;/td>
&lt;td>&lt;strong>The size of a rugby league field is between 112 and 122 meters.&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DoRA&lt;/td>
&lt;td>0.011%&lt;/td>
&lt;td>0.836&lt;/td>
&lt;td>0.911&lt;/td>
&lt;td>7GB&lt;/td>
&lt;td>A rugby league field is 102 meters long and 68 meters wide. The goalposts stand at each end, 9 meters tall.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* I had to limit iterations to 100 for the 3B model, as it was running out of memory&lt;/p>
&lt;h3 id="summary">Summary
&lt;/h3>&lt;p>I was a bit surprised by the results, with the larger Qwen model not performing quite as well as the smaller one. Perhaps this has something to do with the overall lower number of parameters that the smaller model is working with, resulting in a heavier weighting towards the new values?&lt;/p>
&lt;p>The LLama3.2 model was the only one to nail the response across both sizes, which tracks with the general feeling being that it punches above it&amp;rsquo;s weight. I&amp;rsquo;m not sure that this will translate into writing code where the reasoning capability of Qwen is touted to give it the edge — but I&amp;rsquo;m not quite sure at which model size that benefit really kicks in.&lt;/p>
&lt;p>The larger of the two Llama3.2 models was clearly the winner in terms of balancing the cost of training with the quality of the results. While it had the wrong length for the DoRA-trained model, it got the width right, and both sizes regurgitated the correct dimensions when undergoing full training.&lt;/p>
&lt;p>All this while I was considering whether I had just given the models a garbage dataset, but I decided to forge ahead with some investigation into the number of layers the DoRA training was impacting. Perhaps I could get the balance right between partial and full fine-tuning?&lt;/p>
&lt;h3 id="number-of-layers">Number of layers
&lt;/h3>&lt;p>With Llama3.2&amp;rsquo;s 3B parameter model impressing, I decided to run the experiment with that model (also because it doesn&amp;rsquo;t require the additional conversion step that Qwen does). We can reference the existing results for the four-layer run, and I decided to creep up the layers incrementally.&lt;/p>
&lt;p>I also decided to keep the &lt;strong>Full&lt;/strong> result here as the benchmark response.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Layers&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem (GB)&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Full*&lt;/strong>&lt;/td>
&lt;td>&lt;strong>50.135%&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.096&lt;/strong>&lt;/td>
&lt;td>&lt;strong>0.193&lt;/strong>&lt;/td>
&lt;td>&lt;strong>15GB&lt;/strong>&lt;/td>
&lt;td>&lt;strong>The size of a rugby league field is between 112 and 122 meters.&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>0.011%&lt;/td>
&lt;td>0.836&lt;/td>
&lt;td>0.911&lt;/td>
&lt;td>7GB&lt;/td>
&lt;td>A rugby league field is 102 meters long and 68 meters wide. The goalposts stand at each end, 9 meters tall.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>0.021%&lt;/td>
&lt;td>0.506&lt;/td>
&lt;td>0.571&lt;/td>
&lt;td>7GB&lt;/td>
&lt;td>The size of a rugby league field is 112 meters long and 68 meters wide.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>0.043%&lt;/td>
&lt;td>0.318&lt;/td>
&lt;td>0.421&lt;/td>
&lt;td>7GB&lt;/td>
&lt;td>A rugby league field is between 112 and 122 meters long.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>24&lt;/td>
&lt;td>0.064%&lt;/td>
&lt;td>0.295&lt;/td>
&lt;td>0.394&lt;/td>
&lt;td>7GB&lt;/td>
&lt;td>The length of a rugby league field is between 112 and 122 meters, while the width is between 68 and 72 meters.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I played around with a few of the other parameters, including all 28 layers with 500 iterations, but the results were all pretty similar to the 24-layer run — although I noticed that at this point the responses started getting much more terse, closer in length to the training data even when the prompt wasn&amp;rsquo;t related to that data at all.&lt;/p>
&lt;p>I was fairly impressed at this point. A 3B parameter model is certainly on the smaller end, and the dataset I&amp;rsquo;d given it was likely not very good, but the responses were consistently coming back with reasonably correct dimensions. It was still tripping over a few things, such as not being able to return the correct depth of the in-goal area.&lt;/p>
&lt;p>I decided to offer Qwen a chance at redemption, and ran the same experiment with the 4B model. I was curious to see if it would see similar consistency with a layer number of layers being trained.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Layers&lt;/th>
&lt;th>P%&lt;/th>
&lt;th>TLoss&lt;/th>
&lt;th>VLoss&lt;/th>
&lt;th>Mem (GB)&lt;/th>
&lt;th>Response&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>0.009%&lt;/td>
&lt;td>1.055&lt;/td>
&lt;td>1.108&lt;/td>
&lt;td>8.5GB&lt;/td>
&lt;td>A rugby league field is 100 meters long and 60 meters wide. The pitch is 100 meters long, and the width is 60 meters. The goal posts are 10 meters apart, and the crossbar is 4 meters wide.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>24&lt;/td>
&lt;td>0.052%&lt;/td>
&lt;td>0.401&lt;/td>
&lt;td>0.594&lt;/td>
&lt;td>9GB&lt;/td>
&lt;td>The pitch is 100 meters long and 68 meters wide.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Hmm, still a bit off. It was spitting out a bunch of relevant info in the thinking output that was clearly from the dataset, but it even with follow-up prompts it couldn&amp;rsquo;t figure out the depth of the in-goal area, nor would it factor that into the total length.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>Evidently, I underestimated just how much importance is placed on the dataset itself. I did try throwing some tweaked datasets at the problem, but ran into similar issues. This feels very much like a skill that needs to be honed before I&amp;rsquo;ll truly unlock the potential of fine-tuning.&lt;/p>
&lt;p>In any case, I was pleased to see some success with the smaller models, and I think that the results are promising enough to keep banging away at the problem. I can definitely see the potential for this be used to create a bunch of smaller models that can answer questions about specific domains, so long as the datasets are of reasonable enough quality.&lt;/p>
&lt;p>I was far more impressed by the results of the Llama 3.2 model, although while I was first toying with fine-tuning, I did note that Qwen 3 was consistently better when it came to writing code.&lt;/p>
&lt;p>Based purely on the results posted in here however, it&amp;rsquo;s clear that the &lt;strong>Llama 3.2&lt;/strong> model is a great first stop when looking to do any fine-tuning, specifically when fine-tuning &lt;strong>8-16 layers&lt;/strong>.&lt;/p>
&lt;h2 id="next-steps">Next steps
&lt;/h2>&lt;p>The next steps for me are following on from a seed that was planted in one of the earliest videos I watched on this topic.&lt;/p>
&lt;p>In the video, the creator formats his responses as &lt;code>&amp;lt;calculator&amp;gt;...&amp;lt;/calculator&amp;gt;&lt;/code>. The suggestion was, unless I&amp;rsquo;m hallucinating after spending so long buried in AI, that this model could effectively be trained to recognise a maths question and return a response that can hand off the calculation to an actual calculator.&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yOcUCnLgvt8"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>Which got me thinking&amp;hellip; what if instead of a calculator or other tool, we could have a model that called other models?&lt;/p>
&lt;p>Essentially, having a small orchestrator model that can interpret what language, framework, domain etc. the prompt is regarding, and then call the appropriate models to handle each specific task?&lt;/p>
&lt;p>Whether or not that&amp;rsquo;s even a feasible idea is another story entirely, but it certainly feels like learning how to fine-tune a model has only increased my curiosity rather than quenched it.&lt;/p></description></item><item><title>Running AI models locally with Ollama</title><link>https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +1000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/image.png" alt="Featured image of post Running AI models locally with Ollama" />&lt;p>Fine! I&amp;rsquo;ll have another look at AI. Geez.&lt;/p>
&lt;p>At least, that&amp;rsquo;s how it felt when I begrudgingly decided to look at running some models locally.&lt;/p>
&lt;p>A few months ago, I decided to have a look at &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/" >vibe coding with Cursor&lt;/a>. Now, I&amp;rsquo;ll have to admit that I went into that experiment fairly biased despite my best efforts to keep an open mind, but I walked away not very impressed and with the notion that AI was over-hyped even further cemented in my mind.&lt;/p>
&lt;p>Given a few months and some more poking around with GitHub Copilot, and I think I&amp;rsquo;m ready to say that while I&amp;rsquo;m still quite bearish on AI in general, it has certainly found a place in my workflow. Unfortunately, I have experienced some frustration with it — largely along the lines of running out of Claude requests and being left with GPT, which would at times just seemingly disconnect and wouldn&amp;rsquo;t return to working order until I restarted VS Code.&lt;/p>
&lt;p>There&amp;rsquo;s also the whole privacy concern. Personally I find myself unbothered by it, but in the context of customer data I am &lt;em>very&lt;/em> cautious about the implications.&lt;/p>
&lt;p>Anyway, waking up with a &amp;ldquo;what do I want to look into today&amp;rdquo; landed me on the topic of running AI models locally.&lt;/p>
&lt;h2 id="getting-started">Getting started
&lt;/h2>&lt;div class="alert">Tip: Install with &lt;code>brew install ollama&lt;/code> and then run &lt;code>ollama&lt;/code> to see the available commands.&lt;/div>
&lt;p>No surprises that I landed here. Even as someone who has had my head half-buried in the sand when it comes to AI, I was well aware of &lt;a class="link" href="https://ollama.com/" target="_blank" rel="noopener"
>Ollama&lt;/a>. A bit of light searching yielded alternatives, but I decided early on that I was just going to stick with the basics here.&lt;/p>
&lt;p>Installation was a breeze, just needing a quick &lt;code>brew install ollama&lt;/code> to install it locally. Once installed, calling &lt;code>ollama&lt;/code> by itself shows us the relatively simple set of commands we can pass it, but to get started there&amp;rsquo;s only a couple we really need.&lt;/p>
&lt;p>First of all though, to start the Ollama server run &lt;code>ollama serve&lt;/code>.&lt;/p>
&lt;h2 id="models">Models
&lt;/h2>&lt;p>The basic commands we&amp;rsquo;re after here are &lt;code>ollama run&lt;/code>, &lt;code>ollama list&lt;/code> and &lt;code>ollama rm&lt;/code> to run a model, list all models, and remove models.&lt;/p>
&lt;p>The Ollama &lt;a class="link" href="https://ollama.com/search" target="_blank" rel="noopener"
>models page&lt;/a> details a slew of models that we can run.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/ollama-models.png"
width="3196"
height="1344"
srcset="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/ollama-models_hu_3c7ccc0a96541239.png 480w, https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/ollama-models_hu_3aaa39e87eb0fadf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="570px"
>&lt;/p>
&lt;p>Actually installing and running a model is as simple as calling &lt;code>ollama run llama3.1&lt;/code>. This will download it if it hasn&amp;rsquo;t yet been pulled, and runs it immediately. Once installed, we can start typing prompts into the terminal!&lt;/p>
&lt;h3 id="choosing-a-model">Choosing a model
&lt;/h3>&lt;p>I&amp;rsquo;m not going to go too in-depth here — mostly because I still don&amp;rsquo;t really understand it! I&amp;rsquo;ll give it a red-hot crack anyway.&lt;/p>
&lt;p>Looking at the list of available models, I saw a bunch of options and was completely lost as to which I needed. Looking at this heavily truncated list below, I was confused as to which I should use. Especially since there we easily 60+ variants to choose from!&lt;/p>
&lt;ul>
&lt;li>&lt;code>llama3.1:405b-text-fp16&lt;/code>&lt;/li>
&lt;li>&lt;code>llama3.1:70b-text-q3_K_S&lt;/code>&lt;/li>
&lt;li>&lt;code>llama3.1:8b-instruct-q5_K_M&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Anyway, after a bit of reading I was able to break it down to the following, using &lt;code>llama3.1:8b-instruct-q5_K_M&lt;/code> as a reference.&lt;/p>
&lt;ul>
&lt;li>&lt;code>llama3.1&lt;/code> — the name of the model, each may be better or worse at some things.&lt;/li>
&lt;li>&lt;code>8b&lt;/code> — the number of parameters the model contains. Roughly, the &amp;ldquo;size&amp;rdquo; of the model.&lt;/li>
&lt;li>&lt;code>instruct&lt;/code> — the purpose of the model, which generally is the main function of that model.&lt;/li>
&lt;li>&lt;code>q5_K_M&lt;/code> — the model&amp;rsquo;s quantization, or roughly, level of optimisation.&lt;/li>
&lt;/ul>
&lt;p>The Ollama GitHub repository also provided this helpful note, providing some guidelines around system resource requirements for different model sizes.&lt;/p>
&lt;div class="alert">You should have at least 8 GB of RAM available to run the 7B models, 16 GB to run the 13B models, and 32 GB to run the 33B models.&lt;/div>
&lt;p>To expand slightly on quantization as that was a completely new term for me, quantization is the process of converting a model&amp;rsquo;s weights from high precision data types to lower precision types. While this generally translates to a smaller resource footprint, it comes at the cost of a potential reduction in accuracy and quality.&lt;/p>
&lt;p>Models can get even more complex than that, and I found &lt;a class="link" href="https://developers.redhat.com/articles/2025/04/03/how-navigate-llm-model-names#" target="_blank" rel="noopener"
>this page&lt;/a> does a good job of explaining the terms without going too deep. In fact, it&amp;rsquo;s just about where I pulled that little quantization explainer from.&lt;/p>
&lt;p>Personally, I landed on the &lt;code>qwen2.5-coder:3b-instruct-q4_K_M&lt;/code> and &lt;code>qwen2.5-coder:7b-instruct-q4_K_M&lt;/code> models. The 3B model was nice and quick, and seemed to handle most basic tasks with ease. I did find myself frequently switching to the 7B model when the smaller one wasn&amp;rsquo;t quite doing the job.&lt;/p>
&lt;p>I also spent about half an hour looking at new PCs.&lt;/p>
&lt;h2 id="open-webui">Open WebUI
&lt;/h2>&lt;p>As nice as it is to be able to start running models locally with such ease, the interface leaves a little to be desired.&lt;/p>
&lt;p>&lt;a class="link" href="https://openwebui.com/" target="_blank" rel="noopener"
>Open WebUI&lt;/a> offers us a much nicer way to interact with our models — even allowing us to run multiple models side-by-side, which is perfect for comparing the output of various models.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/open-webui.png"
width="3202"
height="1254"
srcset="https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/open-webui_hu_19c72c999ea360bd.png 480w, https://vivecuervo7.github.io/dev-blog/p/ollama-local-agent/images/open-webui_hu_50a7b16347c3c56a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="612px"
>&lt;/p>
&lt;p>Running the following should both pull and start the docker container. Note that this does also create a volume, so settings, chats, etc. will be persisted.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker run -d -p 3000:8080 --add-host&lt;span class="o">=&lt;/span>host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="performance">Performance
&lt;/h2>&lt;p>It didn&amp;rsquo;t take long for a wry smile to grow on my face. I&amp;rsquo;ve spent long enough bragging about how well my decision to go with a MacBook Air has been, and after about a year and a half I finally ran into the thing that made me wish I had a little more grunt under the hood.&lt;/p>
&lt;p>Even some of the smallest models were slow enough to be a little annoying, and those that didn&amp;rsquo;t have smaller varieties were just slower than I would consider to be usable. Certainly, with no qualms about GPT harvesting my data, I was not about to pump the brakes on whatever thinking was going on under the hood.&lt;/p>
&lt;p>I decided to flick open my dusty old Windows laptop (in fact it&amp;rsquo;s neither dusty nor old, currently it serves as my game streaming server using &lt;a class="link" href="https://github.com/LizardByte/Sunshine" target="_blank" rel="noopener"
>Sunlight&lt;/a>) and install Ollama there.&lt;/p>
&lt;p>Woah. Okay, now we&amp;rsquo;re running at what looked like 3-4x faster. Turns out having a GPU kinda helps.&lt;/p>
&lt;h2 id="ollama-over-the-network">Ollama over the network
&lt;/h2>&lt;p>Cool. So we&amp;rsquo;ve got a fast-enough-to-be-usable machine running AI models. Unfortunately, I don&amp;rsquo;t actually do any work on that laptop — it&amp;rsquo;s pretty much dedicated to gaming* these days. That said, I&amp;rsquo;d had a taste of how the models &lt;em>should&lt;/em> be running, and I couldn&amp;rsquo;t look back.&lt;/p>
&lt;p>&lt;em>* by which I mean, of course, the times I&amp;rsquo;d love to be playing games if life could just stop throwing me side quests&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m certainly no network buff, and I chose the path of least resistance. I quickly installed &lt;a class="link" href="https://ngrok.com/" target="_blank" rel="noopener"
>ngrok&lt;/a> and exposed my Ollama endpoint (&lt;code>http://localhost:11434&lt;/code>) to see if it was workable. Navigating to the endpoint that ngrok assigned for me, and I could see the very simple page that told me Ollama was running. Sweet!&lt;/p>
&lt;p>Now, I really should clean this up — since I only intend to use this while I&amp;rsquo;m sitting within arm&amp;rsquo;s reach of both laptops, I really could just serve this over my local network. For the sake of experimentation, however, that&amp;rsquo;s tomorrow&amp;rsquo;s problem.&lt;/p>
&lt;h3 id="open-webui-1">Open WebUI
&lt;/h3>&lt;p>I guess this one can come first since we&amp;rsquo;ve already talked about setting it up.&lt;/p>
&lt;p>Since I already had this up and running on my MacBook, I just needed to pop into the settings. Under the option for &lt;strong>Connections&lt;/strong> there is a section called &lt;strong>Manage Direct Connections&lt;/strong>. This is where we can add the URL of our Ollama server.&lt;/p>
&lt;p>With a bit of trial and error, I found that I needed to append the ngrok-provided URL with &lt;code>/v1&lt;/code> to get it working. It should pick up the models automatically, although they can be specified explicitly if we want.&lt;/p>
&lt;p>Alternatively, the likely easier way to achieve this would be to simply specify the &lt;code>OLLAMA_BASE_URL&lt;/code> while we&amp;rsquo;re creating the container, by adding &lt;code>-e OLLAMA_BASE_URL=&lt;/code> to the previous command. Here&amp;rsquo;s the command again, but you&amp;rsquo;ll need to replace the URL with your own.&lt;/p>
&lt;p>Note that this approach does &lt;strong>not&lt;/strong> require us to append the URL with &lt;code>v1&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker run -d -p 3000:8080 --add-host&lt;span class="o">=&lt;/span>host.docker.internal:host-gateway -e &lt;span class="nv">OLLAMA_BASE_URL&lt;/span>&lt;span class="o">=&lt;/span>http://localhost:11434 -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="github-copilot">GitHub Copilot
&lt;/h3>&lt;p>I was pretty stoked at this point, but GitHub Copilot was the big one.&lt;/p>
&lt;p>I already knew Ollama was supported — in fact, hooking it up to Copilot was the first thing I did after running my first model. Wiring it up to Ollama running on a different computer proved to be a little less obvious, and fortunately I stumbled across a relevant &lt;a class="link" href="https://github.com/orgs/community/discussions/156483" target="_blank" rel="noopener"
>GitHub discussion&lt;/a>.&lt;/p>
&lt;p>The TL;DR for the above is that we&amp;rsquo;re looking for a setting called &lt;code>github.copilot.chat.byok.ollamaEndpoint&lt;/code>. Throwing my ngrok endpoint at that setting allowed me to select the models running on my other machine.&lt;/p>
&lt;p>The only annoyance I found with this is that I had two different sizes of the same model, and GitHub Copilot&amp;rsquo;s interface just showed the same display name for each of them. As a workaround, it looks like I could possibly use a Modelfile to give my models better names, but that opened yet another door — and a welcome one at that.&lt;/p>
&lt;h2 id="modelfiles">Modelfiles
&lt;/h2>&lt;p>Basically, one of the things I&amp;rsquo;ve disliked is this idea that I have a generic AI helper that I constantly need to keep feeding cues to. I have a coding style, and part of what has been turning me away from AI is that it won&amp;rsquo;t write the code that I want it to write!&lt;/p>
&lt;p>While, yes, in the context of GitHub Copilot, Cursor, etc., I can just throw a set of rules at it, I disliked the notion that I would need to maintain this on a per-project basis, constantly re-synchronising them with my other projects&amp;hellip; Nope. That&amp;rsquo;s not saving me time.&lt;/p>
&lt;p>So, I started looking into custom models. Here&amp;rsquo;s the &lt;a class="link" href="https://ollama.readthedocs.io/en/modelfile/#examples" target="_blank" rel="noopener"
>Modelfile reference&lt;/a>, which goes into a lot more detail than I have below.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">svelte-assistant.Modelfile&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">FROM qwen2.5-coder:3b-instruct-q4_K_M
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SYSTEM You are an expert in SvelteKit, the full-stack meta-framework. You are familiar with Svelte 5 syntax. You are familiar with the Svelte documentation found here: https://svelte.dev/docs/svelte/overview and the SvelteKit documentation found here: https://svelte.dev/docs/kit/introduction. When a question or instruction appears to be targeted towards a different web framework, make a suggestion to use a specialised model. Endeavour to answer questions as quickly as possible. Omit any examples or lengthy explanations unless requested.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I threw a couple of questions at it, and it answered as much as I expected it to.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt;&amp;gt;&amp;gt; What do you specialise in?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">I specialize in SvelteKit and related technologies, including Svelte 5 syntax, documentation from
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">svelte.dev/docs/svelte/overview, and the SvelteKit documentation at svelte.dev/docs/kit/introduction.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt;&amp;gt;&amp;gt; Can you help me with a React project?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For React-related questions or assistance, I suggest using a model specialized in React development.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Knowing it was a Hail Mary at best, it unfortunately seemed to not be capable of looking up any information about the newer Svelte 5 syntax — which has thus far been a bit of a souring experience when it comes to using AI as a code assistant.&lt;/p>
&lt;p>Additionally, if I asked it a more pointed question about React such as &amp;ldquo;can you show me an example React component&amp;rdquo;, it would just spit out a component instead of telling me to use a model specific to React.&lt;/p>
&lt;p>Honestly, not such a big deal, but I was kind of hoping to get a few models with a &amp;ldquo;soft&amp;rdquo; specialisation that I could feed additional context into with the hope of being able to just run a bunch of smaller, faster, targeted models that better fit the way I tend to use AI.&lt;/p>
&lt;p>At the very least, we can tweak a few parameters and set the &amp;ldquo;tone&amp;rdquo; for the model&amp;rsquo;s responses.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>It was pretty nice being able to get up and running as easily as it turned out to be. Given my laptop was churning out responses about as quickly as the network-bound GPT or Claude, I&amp;rsquo;m probably going to stick to running this locally for the time being, preserving my capped Claude requests for the truly difficult tasks.&lt;/p>
&lt;p>I&amp;rsquo;m still curious about the potential for those smaller, targeted models, but a lot of the documentation I read about fine-tuning models just went straight over my head. I guess I&amp;rsquo;ll settle for something more within my means, and just set up my Ollama server to run over my local network instead of through ngrok.&lt;/p>
&lt;p>Now to convince my wife that I really do need that expensive PC upgrade&amp;hellip;&lt;/p></description></item><item><title>Deploying an iOS app to TestFlight</title><link>https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +1000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/image.jpg" alt="Featured image of post Deploying an iOS app to TestFlight" />&lt;p>Alrighty. Staring down the barrel of some upcoming work with iOS, and I needed to re-familiarise myself with all things iOS and SwiftUI.&lt;/p>
&lt;p>With some previous, very light experience with iOS development, I was reasonably comfortable with my ability to create working functionality within an app. Not a whole lot different to the typical work I would be doing for a web app. Make UI do a thing, wire it up to a backend, and voila.&lt;/p>
&lt;p>However, this time I was going to need to get it &lt;em>out there&lt;/em>. Or, at least as far as TestFlight. I realised I had no idea how to build the &amp;ldquo;bread&amp;rdquo; of an iOS-flavoured sandwich; all I knew was the middle.&lt;/p>
&lt;h2 id="the-checklist">The checklist
&lt;/h2>&lt;p>Now, I should mention before I begin that this post was mostly written as a rant over the convoluted process of learning how to get an iOS app onto TestFlight. That said, I still wanted to leave behind a bit of a guide or checklist that I could refer to in the future. This is that checklist.&lt;/p>
&lt;div class="alert">&lt;p>&lt;strong>Project setup&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Project&lt;/code> in sidebar &amp;gt; &lt;code>Project&lt;/code> &amp;gt; &lt;code>Info&lt;/code> &amp;gt; &lt;code>Configurations&lt;/code>
&lt;ul>
&lt;li>Add entries for each environment, with both a &lt;strong>Release&lt;/strong> and &lt;strong>Debug&lt;/strong> version&lt;/li>
&lt;li>Create an &lt;code>*.xcconfig&lt;/code> for each environment and link them under this section&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Project&lt;/code> in sidebar &amp;gt; &lt;code>Target&lt;/code> &amp;gt; &lt;code>Build Settings&lt;/code>
&lt;ul>
&lt;li>Under &lt;code>Packaging&lt;/code>, set Bundle IDs for each environment (same values for &lt;strong>Release&lt;/strong> and &lt;strong>Dev&lt;/strong>)&lt;/li>
&lt;li>Under &lt;code>Bundle Display Name&lt;/code>, set Bundle Display Name for each environment (same values for &lt;strong>Release&lt;/strong> and &lt;strong>Dev&lt;/strong>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Scheme&lt;/code> (dropdown at top of page) &amp;gt; &lt;code>Manage Schemes&lt;/code>
&lt;ul>
&lt;li>Modify the list to reflect the environments&lt;/li>
&lt;li>Edit each scheme to ensure the correct &lt;strong>Build Configurations&lt;/strong> are set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>App registration&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Register app
&lt;ul>
&lt;li>Under &lt;code>Identifiers&lt;/code>, register an App ID for each environment using &lt;strong>Explicit&lt;/strong> Bundle ID — these should match what we used for the Bundle IDs in our project setup&lt;/li>
&lt;li>In &lt;a class="link" href="https://appstoreconnect.apple.com/apps" target="_blank" rel="noopener"
>App Store Connect&lt;/a>, add a new app for each environment using those Bundle IDs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Certificate
&lt;ul>
&lt;li>Create a certificate signing request, using Keychain will be easiest&lt;/li>
&lt;li>Create an &lt;strong>Apple Distribution&lt;/strong> certificate via &lt;a class="link" href="https://developer.apple.com/account/resources/" target="_blank" rel="noopener"
>Apple Developer Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Provisioning profiles
&lt;ul>
&lt;li>Under &lt;code>Profiles&lt;/code>, create &lt;strong>App Store Connect&lt;/strong> provisioning profiles for each environment using the distribution certificate&lt;/li>
&lt;li>Download the provisioning profiles, install locally, assign to each environment under &lt;code>Targets&lt;/code> &amp;gt; &lt;code>Signing &amp;amp; Capabilities&lt;/code> (uncheck &lt;strong>Automatically manage signing&lt;/strong> from each environment to manually manage provisioning profiles)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>App Store Connect API&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://appstoreconnect.apple.com/access/integrations/api" target="_blank" rel="noopener"
>App Store Connect &amp;gt; Users and Access &amp;gt; Integrations&lt;/a>
&lt;ul>
&lt;li>Add new team key, download it and take note of &lt;strong>Issuer ID&lt;/strong> and &lt;strong>Key ID&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>CI/CD pipeline&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Create &lt;code>ExportOptions.plist&lt;/code> — run &lt;code>xcodebuild -help&lt;/code> for guidance on options
&lt;ul>
&lt;li>Make sure we specify the correct provisioning profile for each environment&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prepare secrets, ideally using Base64 encoding
&lt;ul>
&lt;li>Export certificate from Keychain (including private key used for the certificate signing request)&lt;/li>
&lt;li>Encode the provisioning profiles we downloaded for local installation&lt;/li>
&lt;li>Add to GitHub secrets etc., including the &lt;strong>App Store Connect API&lt;/strong> details from above&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pipeline steps:
&lt;ul>
&lt;li>Create temporary Keychain&lt;/li>
&lt;li>Decode and install certificates&lt;/li>
&lt;li>Decode and install provisioning profiles&lt;/li>
&lt;li>Setup Xcode (use correct version)&lt;/li>
&lt;li>Run tests etc. — &lt;code>xcodebuild test&lt;/code>&lt;/li>
&lt;li>Build app archive — &lt;code>xcodebuild archive&lt;/code>&lt;/li>
&lt;li>Export IPA — &lt;code>xcodebuild -exportArchive&lt;/code>&lt;/li>
&lt;li>Set up the App Store Connect API key&lt;/li>
&lt;li>Upload to App Store Connect — &lt;code>xcrun altool --upload-app&lt;/code>&lt;/li>
&lt;li>Clean up temporary keychain, installed provisioning profiles etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="project-setup">Project setup
&lt;/h2>&lt;p>I decided that my foray into the world of deploying an iOS app should tick a few boxes.&lt;/p>
&lt;ul>
&lt;li>Some basic functionality&lt;/li>
&lt;li>Multiple environments that can be installed side-by-side&lt;/li>
&lt;li>Deploys via GitHub Actions with passing tests&lt;/li>
&lt;li>Pushes the app to TestFlight&lt;/li>
&lt;/ul>
&lt;p>The first two were pretty straightforward. Whizzed through some of the basic tutorials and realised I had never really covered testing. Ended up with a very small, tutorial-driven app that I could both test and deploy.&lt;/p>
&lt;h3 id="environment-setup">Environment setup
&lt;/h3>&lt;p>Environment? Hmm, well, not entirely sure I had this one set up correctly.&lt;/p>
&lt;p>I had two targets set up, one for the app and another for the tests. From what I had uncovered with some Googling, was to be expected. I followed yet another guide on setting up multiple configurations.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/targets.png"
width="322"
height="316"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/targets_hu_d1eae1af085fab1a.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/targets_hu_5712f9f235e672e9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="244px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration.png"
width="1014"
height="394"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration_hu_f5b16ab97e041119.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration_hu_d973ecb1ba882fd0.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="257"
data-flex-basis="617px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration-files.png"
width="534"
height="282"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration-files_hu_e98721b59e55c245.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/configuration-files_hu_d8df1f5c6f741ae4.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>Popped in a quick &lt;code>APP_TITLE=Pilot&lt;/code> (adjusted for each environment), added it to &lt;code>Target &amp;gt; Info &amp;gt; Custom iOS Target Properties&lt;/code> and referenced the value in the app. A few steps to remember, but it worked.&lt;/p>
&lt;p>Wait — I almost forgot. I also needed to set up the bundle IDs and display names&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/packaging.png"
width="1114"
height="490"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/packaging_hu_e0b7dd1aec70e6ec.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/packaging_hu_7df0d0bc48827b91.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="545px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/bundle-display-names.png"
width="846"
height="478"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/bundle-display-names_hu_df35a4757cf5557b.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/bundle-display-names_hu_aeaad4a1852e1780.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="424px"
>&lt;/p>
&lt;p>Hmm. &lt;em>And&lt;/em> set up the schemas. More than just a few steps to remember at this point, but it seems like this is really a once-per-project task. I can stomach that. It&amp;rsquo;s the sort of thing I&amp;rsquo;ll need to find a reference for every time as well, which is at least half of the motivation for turning this into a blog post.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/schemas.png"
width="1400"
height="244"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/schemas_hu_c33b541cd8190083.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/schemas_hu_c3f096fb9320d850.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="573"
data-flex-basis="1377px"
>&lt;/p>
&lt;h3 id="app-icon">App icon
&lt;/h3>&lt;p>This one actually came towards the end, after I had written the CI/CD pipeline. Uploading hit a hitch due to not having an app icon — a bit of an annoyance given I was simply wanting to learn how to go from local development to a TestFlight deployment.&lt;/p>
&lt;p>Fortunately, the GitHub workflow had some output that told me exactly what was missing.&lt;/p>
&lt;div class="highlight error">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">The bundle does not contain an app icon for iPhone / iPod Touch of exactly &amp;#39;120x120&amp;#39; pixels...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The bundle does not contain an app icon for iPad of exactly &amp;#39;152x152&amp;#39; pixels...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Looks like they need to be in .png format, too. Cool, this one looked pretty easy. Additionally, the errors informed me that I&amp;rsquo;d need to use the asset catalog.&lt;/p>
&lt;div class="highlight error">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">A value for the Info.plist key &amp;#39;CFBundleIconName&amp;#39; is missing in the bundle &amp;#39;com.isaacdedini.pilot.dev&amp;#39;. Apps built with iOS 11 or later SDK must supply app icons in an asset catalog and must also provide a value for this Info.plist key.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After spotting &lt;a class="link" href="https://developer.apple.com/documentation/xcode/configuring-your-app-icon#Specify-app-icon-variations" target="_blank" rel="noopener"
>this line in the documentation&lt;/a> suggesting that if I provided a 1024x1024 image, it would automatically create the appropriate variations, I quickly created an icon of that size.&lt;/p>
&lt;p>Alright! Now we&amp;rsquo;re cooking! No idea if I needed to fill all three options or not, but I didn&amp;rsquo;t want to wait until I ran the workflow to find that out.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/appicon-filled.png"
width="937"
height="350"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/appicon-filled_hu_43d21b3a18294a37.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/appicon-filled_hu_f8981f376eee6caf.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="642px"
>&lt;/p>
&lt;p>Heeding the error message that indicated I&amp;rsquo;d need to specify the &lt;code>CFBundleIconName&lt;/code> in &lt;code>Info.plist&lt;/code>, I went and added that. Confusingly, trying to add it kept changing the name of the key, until I confirmed that this was just Xcode trying to be helpful. By calling it something other than the key. Why, Apple, must you make things so confusing?&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-1.png"
width="525"
height="121"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-1_hu_b75709fc4c5dbf5b.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-1_hu_95d90671f8fdd664.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="433"
data-flex-basis="1041px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-2.png"
width="525"
height="123"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-2_hu_e1388fa92a5e8fc8.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/info-plist-appicon-2_hu_eee0fa807969bf86.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1024px"
>&lt;/p>
&lt;p>Now, not entirely sure here but a quick search indicated that I should just drop the name of the resource from the asset catalog in there as the value. Popped in &lt;code>AppIcon&lt;/code> and pushed my changes up.&lt;/p>
&lt;h2 id="app-registration">App registration
&lt;/h2>&lt;p>All the tutorials I found &lt;em>kind of&lt;/em> hinted at where to go, and used all the words I needed to know, but nothing really gave me a &amp;ldquo;step one&amp;rdquo;. Except for one video, where they enabled a capability via Xcode seemingly to trigger some background setting up of things, and then they removed the capability. Yeah, that wasn&amp;rsquo;t going to help me understand this at all.&lt;/p>
&lt;p>Anyway, off I went to the Apple Developer Portal thinking I&amp;rsquo;d figure things out from there. I ended up going around in circles for a spell, so hopefully putting it all in order below will make the process less confusing. There was far more pain involved here than is expressed below.&lt;/p>
&lt;h3 id="registering-the-app">Registering the app
&lt;/h3>&lt;p>This one threw me at first, coming from a web background I was looking to register a single application, with the intention of having different versions available as separate environments.&lt;/p>
&lt;p>From what I gathered in the end is that typically we might have a single app registered, and make newer version of the app available to testers via TestFlight while we have a different version released to end users.&lt;/p>
&lt;p>This was a little different to what I was after in individual &amp;ldquo;environments&amp;rdquo; that could be installed side-by-side. I couldn&amp;rsquo;t find a better way to achieve this outside of simply registering my environments as completely distinct apps.&lt;/p>
&lt;h4 id="identifiers">Identifiers
&lt;/h4>&lt;div class="alert">Tip: register &lt;strong>explicit&lt;/strong> Bundle IDs for each environment that match those we&amp;rsquo;re using in Xcode.&lt;/div>
&lt;p>We&amp;rsquo;ll want to register each of the bundle IDs we used when we were setting up our project under &lt;code>Packaging&lt;/code>.&lt;/p>
&lt;p>Make sure to use &lt;strong>Explicit&lt;/strong> bundle IDs — the descriptions provided had me initially thinking I wanted to use wildcard bundle IDs, and I spent a long time trying to figure out why they weren&amp;rsquo;t showing up as options for my app registrations.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id.png"
width="2902"
height="978"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id_hu_64f30cbcb16395af.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id_hu_219777c1a971053c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="712px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id-explicit.png"
width="2646"
height="546"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id-explicit_hu_31842dfc9153a60a.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/register-app-id-explicit_hu_75c5d4af4b0933ac.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="484"
data-flex-basis="1163px"
>&lt;/p>
&lt;h4 id="app-store-connect">App Store Connect
&lt;/h4>&lt;p>Here&amp;rsquo;s where we actually create the app!&lt;/p>
&lt;p>I found myself landing here way too early the first time around, and this really cost me a lot of time. As mentioned before, this was largely due to the fact that I&amp;rsquo;d created a wildcard bundle ID, but when it didn&amp;rsquo;t work I ended up floundering around creating certificates, provisioning profiles, registering devices etc.&lt;/p>
&lt;p>Turns out, the identifier is all we need to get to this point. The other stuff is only actually required to build and deploy our application.&lt;/p>
&lt;p>Go to &lt;a class="link" href="https://appstoreconnect.apple.com/apps" target="_blank" rel="noopener"
>App Store Connect &amp;gt; Apps&lt;/a>. Click on the big blue plus, and fill out the dialog. Based on the info provided for the &lt;strong>SKU&lt;/strong> field, I just popped a UUID in there. Not sure what the expectation is here, nor why a UUID wouldn&amp;rsquo;t be the default.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku.png"
width="1120"
height="994"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku_hu_ced9131aa1367dce.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku_hu_21ffd4ea8aeca1f6.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>
&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku-info.png"
width="1136"
height="238"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku-info_hu_925b9104129cf718.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-sku-info_hu_e78cb0942005fef7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="477"
data-flex-basis="1145px"
>&lt;/p>
&lt;p>We&amp;rsquo;ll need to repeat the process for each of our environments — which still doesn&amp;rsquo;t feel right seeing three individual apps, but this is the closest I&amp;rsquo;ve come to having my three environments available.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-three.png"
width="2814"
height="484"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-three_hu_2f65616f7042452a.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/add-app-three_hu_ff1e6c6e01975cb9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="581"
data-flex-basis="1395px"
>&lt;/p>
&lt;h3 id="certificate">Certificate
&lt;/h3>&lt;div class="alert">Tip: we&amp;rsquo;ll need an &lt;strong>Apple Distribution&lt;/strong> certificate for deploying to App Store Connect.&lt;/div>
&lt;p>This is something that, from what I can gather, is something that needs only be done once. If a distribution certificate already exists, we&amp;rsquo;d just use that to create our provisioning profiles.&lt;/p>
&lt;h4 id="certificate-signing-request">Certificate Signing Request
&lt;/h4>&lt;p>First up, we&amp;rsquo;ll need to create the Certificate Signing Request (CSR). We&amp;rsquo;ll need to export our certificate via Keychain later as well, as this contains the private key used for the CSR.&lt;/p>
&lt;p>It is my understanding that the signing request itself is platform-agnostic, meaning this could also be done via &lt;code>openssl&lt;/code>. Which is interesting to say the least — if I&amp;rsquo;ve understood this correctly it means we could feasibly get all of our app registration done via the browser, opening the door to potentially building and deploying an app &lt;em>without&lt;/em> explicitly needing an Apple device.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/certificate-signing-request.png"
width="1456"
height="654"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/certificate-signing-request_hu_8ab90160fb78bab7.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/certificate-signing-request_hu_1cec05c989b4c16e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="534px"
>&lt;/p>
&lt;h4 id="creating-the-certificate">Creating the certificate
&lt;/h4>&lt;p>After saving the signing request, navigate to &lt;a class="link" href="https://developer.apple.com/account/resources/certificates/add" target="_blank" rel="noopener"
>Apple Developer Resources &amp;gt; Certificates &amp;gt; Add&lt;/a>.&lt;/p>
&lt;p>Select &lt;strong>Apple Distribution&lt;/strong>, and upload the signing request.&lt;/p>
&lt;p>While we shouldn&amp;rsquo;t need to install the certificate on our machines for local development, on a Mac the easiest way to export our certificate for use in our CI/CD pipeline later will be to export it via Keychain. Since we&amp;rsquo;re here, it won&amp;rsquo;t hurt to just download and install this now.&lt;/p>
&lt;h3 id="provisioning-profiles">Provisioning profiles
&lt;/h3>&lt;div class="alert">Tip: for deploying to TestFlight, an &lt;strong>App Store Connect&lt;/strong> provisioning profile is required.&lt;/div>
&lt;p>This one probably gave me the most pain, largely due to the fact that I started here way too early. Trying to add the app to App Store Connect told me that it needed to be the same bundle ID that I&amp;rsquo;d used in Xcode, and over there the only thing I could change other than the bundle ID itself was the provisioning profile, so I thought &lt;em>that&lt;/em> must have been the issue.&lt;/p>
&lt;p>Anyhow, between not knowing &lt;em>which&lt;/em> provisioning profile to create, not having created a certificate yet, and having created the wildcard bundle ID at this point, there was a lot of back and forth, removing provisioning profiles etc. before I got this one right.&lt;/p>
&lt;h4 id="profile-creation">Profile creation
&lt;/h4>&lt;p>Navigate to &lt;a class="link" href="https://developer.apple.com/account/resources/profiles/list" target="_blank" rel="noopener"
>Apple Developer Resources &amp;gt; Profiles&lt;/a> and add a new profile.&lt;/p>
&lt;p>The first thing that caught me out was which provisioning profile to use. A few of the descriptions felt like they could fit my use case, but long story short the correct option was &lt;strong>App Store Connect&lt;/strong>.&lt;/p>
&lt;p>It&amp;rsquo;ll also ask for an App ID and certificate. We need provisioning profiles for each of our App IDs, but the certificate should be the same one for each — the distribution certificate we created earlier.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-which.png"
width="2252"
height="544"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-which_hu_f1bbc13162615480.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-which_hu_d586dd9cdcb48cb7.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="413"
data-flex-basis="993px"
>&lt;/p>
&lt;h4 id="assigning-profiles">Assigning profiles
&lt;/h4>&lt;p>Once they&amp;rsquo;re created, we can download the &lt;code>*.mobileprovision&lt;/code> files. Double-clicking these once downloaded doesn&amp;rsquo;t provide any feedback, but they should be added to one of a couple of directories — on my machine they ended up in &lt;code>~/Library/Developer/Xcode/UserData/Provisioning Profiles/&lt;/code>. As I needed to do with the number of times I got this wrong, removing them is as simple as deleting them from this directory.&lt;/p>
&lt;p>We can then go to our &lt;strong>Signing &amp;amp; Capabilites&lt;/strong> for our target and assign the provisioning profiles to the relevant environments. Ignore the fact that they&amp;rsquo;re listed under &amp;ldquo;ineligible&amp;rdquo; — they were able to be added perfectly fine. Make sure we&amp;rsquo;ve also unchecked &lt;strong>Automatically manage signing&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-ineligible.png"
width="2386"
height="604"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-ineligible_hu_26e11c7f541e7677.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/provisioning-profile-ineligible_hu_6b0940d5196a3c96.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="395"
data-flex-basis="948px"
>&lt;/p>
&lt;h2 id="cicd-pipeline">CI/CD pipeline
&lt;/h2>&lt;p>Fortunately this seemed to be more well documented. I quickly stumbled across &lt;a class="link" href="https://www.andrewhoog.com/post/how-to-build-an-ios-app-with-github-actions-2023/" target="_blank" rel="noopener"
>this blog post&lt;/a> and decided to use that as a guide.&lt;/p>
&lt;h3 id="app-store-connect-api">App Store Connect API
&lt;/h3>&lt;div class="alert">Tip: the &lt;strong>App Manager&lt;/strong> role is required for uploading an app in our CI/CD pipeline.&lt;/div>
&lt;p>This once caught me out yet again a little when it came to implementing this in the pipeline. Once again information was inconsistent and left me wondering what the recommended way to deploy an app was. Initially I landed on using the App Store Connect API directly.&lt;/p>
&lt;p>Eventually I realised that using the API directly wasn&amp;rsquo;t required, but we still needed the key we&amp;rsquo;d otherwise have created, to support using &lt;code>altool&lt;/code> for deployment.&lt;/p>
&lt;p>Creating an API key was pretty straightforward. Navigate to &lt;a class="link" href="https://appstoreconnect.apple.com/access/integrations/api" target="_blank" rel="noopener"
>App Store Connect &amp;gt; Users and Access &amp;gt; Integrations&lt;/a>, and click the blue plus. There are lots of links around to help out. Very shortly, I had a key created and the three requisite secrets added to GitHub — we&amp;rsquo;ll need the &lt;strong>Issuer ID&lt;/strong>, &lt;strong>Key ID&lt;/strong> and the key itself.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/gh-secrets-app-store-connect.png"
width="1576"
height="490"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/gh-secrets-app-store-connect_hu_ce0e9530f3f1ead9.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/gh-secrets-app-store-connect_hu_3629a98667b1aef9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="321"
data-flex-basis="771px"
>&lt;/p>
&lt;h3 id="preparing-for-export">Preparing for export
&lt;/h3>&lt;div class="alert">Tip: Running &lt;code>xcodebuild -help&lt;/code> gives us an up-to-date list of all the available keys for our export options.&lt;/div>
&lt;p>The file we needed to create is &lt;code>ExportOptions.plist&lt;/code>, which will tell Xcode how to export the archive. I couldn&amp;rsquo;t find anything about generating one of these without running an export locally to do&amp;hellip; things. Again, I wanted to know exactly &lt;em>what&lt;/em> it was doing, and why.&lt;/p>
&lt;h4 id="basic-structure">Basic structure
&lt;/h4>&lt;p>From what I had gathered, the very basic structure we&amp;rsquo;d need is as follows. Interestingly, a generated file used the deprecated &lt;code>app-store&lt;/code> for the &lt;code>method&lt;/code>, which caused an error to be displayed when I finally ran the workflow.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">ExportOptions.plist&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;plist&lt;/span> &lt;span class="na">version=&lt;/span>&lt;span class="s">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dict&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;key&amp;gt;&lt;/span>method&lt;span class="nt">&amp;lt;/key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;string&amp;gt;&lt;/span>app-store-connect&lt;span class="nt">&amp;lt;/string&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;key&amp;gt;&lt;/span>uploadBitcode&lt;span class="nt">&amp;lt;/key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;false/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;key&amp;gt;&lt;/span>uploadSymbols&lt;span class="nt">&amp;lt;/key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;true/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;key&amp;gt;&lt;/span>compileBitcode&lt;span class="nt">&amp;lt;/key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;false/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dict&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/plist&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="additional-values">Additional values
&lt;/h4>&lt;p>A few additional entries into our export options are required.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;signingStyle&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;manual&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;provisioningProfiles&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;signingCertificate&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;Apple Distribution&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;teamID&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;CH6SJWRT2C&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;destination&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;export&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;provisioningProfiles&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;dict&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;com.isaacdedini.pilot.dev&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;iOS TestFlight Pilot Dev&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;com.isaacdedini.pilot.staging&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;iOS TestFlight Pilot Staging&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;key&amp;gt;com.isaacdedini.pilot.prod&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;string&amp;gt;iOS TestFlight Pilot Prod&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;lt;/dict&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> &amp;lt;/dict&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/plist&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A quick explainer for each of these values is provided below. While a few of them indicate that the defaults should be fine, I decided to err towards being overly explicit.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>signingStyle&lt;/td>
&lt;td>Options: &lt;code>manual&lt;/code> or &lt;code>automatic&lt;/code> — this should default to whichever was used to archive the app&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>signingCertificate&lt;/td>
&lt;td>We can provide an explicit name, or an automatic selector — in this case we&amp;rsquo;re using the &lt;strong>Apple Distribution&lt;/strong> automatic selector, which will pick the newest one&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>teamId&lt;/td>
&lt;td>The developer team to use for this archive — should default to the team used to archive the app&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destination&lt;/td>
&lt;td>Options: &lt;code>export&lt;/code> or &lt;code>upload&lt;/code> — in this case we just want a local export&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provisioningProfiles&lt;/td>
&lt;td>This is in the form of a &lt;code>dict&lt;/code>, with our key value pairs being our bundle IDs and the name of the provisioning profiles.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="pipeline-steps">Pipeline steps
&lt;/h3>&lt;div class="alert">Tip: Documentation for &lt;code>altool&lt;/code> used for uploading the app can be found &lt;a class="link" href="https://help.apple.com/asc/appsaltool/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/div>
&lt;p>Without going into too much depth, the basic steps that needed to be achieved were as follows.&lt;/p>
&lt;ol>
&lt;li>Create temporary Keychain&lt;/li>
&lt;li>Install iOS certificates&lt;/li>
&lt;li>Install provisioning profiles&lt;/li>
&lt;li>Setup Xcode&lt;/li>
&lt;li>Run tests&lt;/li>
&lt;li>Build archive&lt;/li>
&lt;li>Export IPA&lt;/li>
&lt;li>Copy the App Store Connect key itself to a local directory&lt;/li>
&lt;li>Upload IPA to App Store Connect&lt;/li>
&lt;li>Cleanup&lt;/li>
&lt;/ol>
&lt;p>A complete GitHub workflow can be found &lt;a class="link" href="https://github.com/vivecuervo7/ios-testflight-pilot" target="_blank" rel="noopener"
>here&lt;/a> that includes the above steps, but below are some snippets of the critical &lt;strong>test&lt;/strong>, &lt;strong>archive&lt;/strong>, &lt;strong>export&lt;/strong> and &lt;strong>upload&lt;/strong> steps.&lt;/p>
&lt;h4 id="run-tests">Run tests
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Run tests&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cd Pilot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> xcodebuild test \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -project Pilot.xcodeproj \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -scheme &amp;#34;Pilot Dev&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -configuration &amp;#34;Debug Dev&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -destination &amp;#34;platform=iOS Simulator,name=iPhone 16&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="build-archive">Build archive
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build archive for Dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.environment == &amp;#39;dev&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cd Pilot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> mkdir -p build
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> xcodebuild archive \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -project Pilot.xcodeproj \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -scheme &amp;#34;Pilot Dev&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -configuration Release \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -archivePath &amp;#34;build/Pilot-Dev.xcarchive&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -destination &amp;#34;generic/platform=iOS&amp;#34; \&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="export-ipa">Export IPA
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Export IPA for Dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.environment == &amp;#39;dev&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cd Pilot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> xcodebuild -exportArchive \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -archivePath &amp;#34;build/Pilot-Dev.xcarchive&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -exportPath &amp;#34;build/&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -exportOptionsPlist ../ExportOptions.plist&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="upload-to-app-store-connect">Upload to App Store Connect
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Upload to TestFlight for Dev&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">matrix.environment == &amp;#39;dev&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> cd Pilot
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> xcrun altool --upload-app \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -f &amp;#34;build/Pilot.ipa&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> -t ios \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> --apiKey &amp;#34;${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> --apiIssuer &amp;#34;${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}&amp;#34; \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> --verbose&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="success">Success!
&lt;/h2>&lt;p>Green lights! Once I checked one of the options to make App Store Connect stop complaining about &amp;ldquo;missing compliance&amp;rdquo; for the recently uploaded build, I &lt;em>finally&lt;/em> had a build available through TestFlight.&lt;/p>
&lt;p>What a journey.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/app-store-connect-feedback.png"
width="874"
height="659"
srcset="https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/app-store-connect-feedback_hu_bd990597ed29803e.png 480w, https://vivecuervo7.github.io/dev-blog/p/deploying-ios-app-to-testflight/images/app-store-connect-feedback_hu_85dc31c0d3157e7c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p></description></item><item><title>React Three Fiber</title><link>https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +1000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/image.png" alt="Featured image of post React Three Fiber" />&lt;p>Recently I had cause to revisit the 3D web landscape. Having previously used &lt;a class="link" href="https://www.babylonjs.com/" target="_blank" rel="noopener"
>babylon.js&lt;/a> for similar projects and having had a largely positive experience, I remained curious about how Three.js stacked up against it.&lt;/p>
&lt;p>I knew ahead of time that I was likely to land on a React app as a wrapper for any 3D content, and it was largely the presence of a couple of libraries that promised to make this a more streamlined experience — namely &lt;a class="link" href="https://r3f.docs.pmnd.rs/" target="_blank" rel="noopener"
>react-three-fiber&lt;/a> and &lt;a class="link" href="https://drei.docs.pmnd.rs/" target="_blank" rel="noopener"
>drei&lt;/a>.&lt;/p>
&lt;p>As such, this post will be leaning heavily on those, rather than looking at holding Three.js directly.&lt;/p>
&lt;h2 id="yeah-but-why">Yeah, but why?
&lt;/h2>&lt;p>While it has been a few years since I last worked with Babylon.js, my initial memory of it was that it was big. Reviewing the landing page for it promises big things in the way of lighting, shadows, a Node Render Graph to control the whole render pipeline, right through to a fully-fledged physics engine.&lt;/p>
&lt;p>Bottom line, it felt like a game engine. Which makes sense, as this is closer to what they&amp;rsquo;re targeting.&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong — if I was building a more game-like experience I would have jumped straight at Babylon.js. My needs were a bit lighter however, which is what got me looking at the more lightweight Three.js.&lt;/p>
&lt;p>Additionally, looking at NPM trends for these two packages indicates that Three.js is wildly more popular.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends.png"
width="1288"
height="475"
srcset="https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends_hu_d23fd6ff69bcbaa9.png 480w, https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends_hu_8783627c2371457e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>Although, I find that chart to be a little misleading. Babylon.js certainly isn&amp;rsquo;t lacking in popularity — both libraries have plenty of stars on GitHub, and are both kept up to date.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends-stats.png"
width="1294"
height="159"
srcset="https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends-stats_hu_474115768d2fdfdc.png 480w, https://vivecuervo7.github.io/dev-blog/p/react-three-fiber/images/npm-trends-stats_hu_ce4f9066bc7167eb.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="813"
data-flex-basis="1953px"
>&lt;/p>
&lt;p>The bundle size is also worth a brief mention, although being modular this doesn&amp;rsquo;t represent the final bundle size. But to give us a more concrete idea of what I mean by Three.js being more lightweight, the minified and gzipped bundle size comes in at ~170kB, compared to Babylon.js at 1.4MB.&lt;/p>
&lt;p>What really sucked me however in was looking specifically at React Three Fiber and Drei. I was less swayed by the comparisons around bundle size and performance, as each seemed to have their own merits — Three.js for smaller, lightweight cases, and Babylon.js for the big guns. My use case was likely going to straddle the two, and when I find myself torn between two options in such cases, I tend towards that which offers a better developer experience.&lt;/p>
&lt;h2 id="simpler-syntax-with-react-three-fiber">Simpler syntax with React Three Fiber
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=DPl34H2ISsk&amp;amp;t=558s" target="_blank" rel="noopener"
>This video&lt;/a> does a great job of explaining what React Three Fiber (R3F) is actually doing under the hood, if you want a deeper explanation, but essentially it allows us to use a more React-like syntax when describing a Three.js scene.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">Three.js&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">scene&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Scene&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">cube&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Mesh&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">cube&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">geometry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BoxGeometry&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">cube&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">material&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">MeshStandardMaterial&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">scene&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cube&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Three.js will require us to explicitly create our mesh, add our geometry and materials, and then add it to the scene. From memory, this isn&amp;rsquo;t far from what we&amp;rsquo;d expect in Babylon.js either.&lt;/p>
&lt;p>Down the track when we start looking to componentise things we&amp;rsquo;re very likely to end up using classes, but realistically this is just plain old Javascript so we&amp;rsquo;re pretty free in terms of how we want to split our code up.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">R3F&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mesh&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">boxGeometry&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meshStandardMaterial&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">mesh&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Yep, straight up HTML-like markup.&lt;/p>
&lt;p>R3F essentially works by saying that any child element will be added to it&amp;rsquo;s parent with the &lt;code>.add()&lt;/code> function. This is why we don&amp;rsquo;t need to explicitly call &lt;code>scene.add()&lt;/code> in R3F to have the object added to the scene.&lt;/p>
&lt;p>The slight difference to be aware of here is that if a child element has an &lt;code>attach&lt;/code> property, it will instead assign that child element to a &lt;em>property&lt;/em> of the parent.&lt;/p>
&lt;p>There&amp;rsquo;s a little magic in the example above, where R3F will automatically add the &lt;code>attach&lt;/code> property to any elements that end with &amp;ldquo;Geometry&amp;rdquo; or &amp;ldquo;Material&amp;rdquo;. This makes the above element equivalent to &lt;code>&amp;lt;boxGeometry attach=&amp;quot;geometry&amp;quot; /&amp;gt;&lt;/code>, which assigns the &lt;code>boxGeometry&lt;/code> element to the &lt;code>geometry&lt;/code> property of &lt;code>mesh&lt;/code>.&lt;/p>
&lt;p>More importantly than the syntax changes themselves however, is that it means when we come to componentisation we can simply create standard React components.&lt;/p>
&lt;h2 id="drei">Drei
&lt;/h2>&lt;p>Drei provides a bunch of useful helpers and abstractions. I couldn&amp;rsquo;t really imagine using R3F &lt;em>without&lt;/em> also bringing Drei to the table — although I did find it a little constraining in some cases, largely around cameras and camera controls.&lt;/p>
&lt;p>That said, I don&amp;rsquo;t know if this was specifically Drei, or it was more of an underlying problem.&lt;/p>
&lt;h2 id="performance">Performance
&lt;/h2>&lt;p>Interestingly, the only time I noticed any drop in performance was when some AI-generated slop (yeah, I wanted to quickly throw some decent functionality at Three.js to make sure it could do what I wanted) caused excessive React renders.&lt;/p>
&lt;p>From everything I&amp;rsquo;ve read online, Three.js &lt;em>should&lt;/em> be capable to better performance by merit of being more lightweight and offering tooling a little closer to the metal than Babylon.js. That said, the consensus seemed to be that Babylon.js is going to provide more stable performance in larger or more complex scenes.&lt;/p>
&lt;p>Babylon.js does seem to prefer ease-of-use, with documentation covering &lt;a class="link" href="https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#how-to-optimize-your-scene" target="_blank" rel="noopener"
>how to optimise a scene&lt;/a>.&lt;/p>
&lt;p>Ultimately, this wasn&amp;rsquo;t going to be a deal-breaker for me, but it was interesting to note the difference in strengths between the two.&lt;/p>
&lt;h2 id="documentation">Documentation
&lt;/h2>&lt;p>Now, this one took me by surprise. Three.js has been around for a bit longer, so I naturally assumed the documentation would be a strong point. Much to my surprise, the documentation wasn&amp;rsquo;t lacking per se, but felt hard to consume. Perhaps it was due to using a few libraries, but I found myself constantly bouncing between Three.js docs, R3F docs, and Drei docs.&lt;/p>
&lt;p>Babylon.js on the other hand has &lt;em>fantastic&lt;/em> documentation. Where hunting for answers to problems in Three.js took me down the path of forum posts and tutorials, the Babylon.js documentation was all that was needed for the most part.&lt;/p>
&lt;h2 id="inspector">Inspector
&lt;/h2>&lt;p>In a major point for Babylon.js, Three.js did not appear to have anything even remotely approaching the usefulness of Babylon.js&amp;rsquo; &lt;a class="link" href="https://doc.babylonjs.com/toolsAndResources/inspector" target="_blank" rel="noopener"
>Inspector&lt;/a>. I don&amp;rsquo;t recall using this extensively those few years ago, but it was useful on a couple of occasions. Certainly something I&amp;rsquo;d rather have and not need.&lt;/p>
&lt;p>Three.js on the other hand did not offer anything similar. The closest I stumbled upon was a reference to some libraries that could help to display frame rates and draw calls etc. The easiest way to plug anything in was to use Drei&amp;rsquo;s &lt;a class="link" href="https://drei.docs.pmnd.rs/misc/stats" target="_blank" rel="noopener"
>&lt;code>&amp;lt;Stats /&amp;gt;&lt;/code>&lt;/a> component.&lt;/p>
&lt;h2 id="xr-support">XR support
&lt;/h2>&lt;p>This one came as no surprise, but Babylon.js won out here. This was probably the moment where I started wondering whether Babylon.js might still be my preferred option — it was just one of those things that I didn&amp;rsquo;t want to have to mess around with to get working.&lt;/p>
&lt;p>That said, it wasn&amp;rsquo;t particularly difficult to get VR/AR working with Three.js, but the first thing I noticed was a lack of typical VR controls such as being able to teleport around a scene.&lt;/p>
&lt;h2 id="react-integration">React integration
&lt;/h2>&lt;p>Relying quite heavily on some memories eroded by time, I have some vague recollection of integrating Babylon.js with the React wrapper to be less than ideal. Workable, but it always felt like we were trying to bridge over the two worlds.&lt;/p>
&lt;p>This is really the big reason why Three.js and more specifically R3F jumped out at me. The React integration is really solid here, and makes it feel very easy to wrap React around a 3D experience. For a use case where the React-based UI would form a large part of the application, this felt like a solid argument for going with R3F.&lt;/p>
&lt;h3 id="on-demand-rendering">On-demand rendering
&lt;/h3>&lt;p>Ok, this one was pretty cool.&lt;/p>
&lt;p>Three.js runs as you would expect a typical game or scene to run, where there is a game loop that causes constant re-renders. This is exactly what we want if we have a scene with constantly moving parts, but as was the case with what I needed, things very much could come to rest in between interactions.&lt;/p>
&lt;p>R3F offers us the option for &lt;a class="link" href="https://r3f.docs.pmnd.rs/advanced/scaling-performance#on-demand-rendering" target="_blank" rel="noopener"
>on-demand rendering&lt;/a>, which allows us to set the canvas&amp;rsquo; &lt;code>frameloop&lt;/code> prop, which means we will render frames whenever props are changed throughout the component tree. Adding this and watching the &lt;code>&amp;lt;Stats /&amp;gt;&lt;/code> panel showed that the FPS counter stopped dead in it&amp;rsquo;s tracks whenever I wasn&amp;rsquo;t directly interacting with the scene, and there was no discernable impact to the expected behaviour of the app once I started using it.&lt;/p>
&lt;p>Yay for battery life, I guess?&lt;/p>
&lt;h3 id="concurrency">Concurrency
&lt;/h3>&lt;p>Without going into too much detail, R3F can lean on React&amp;rsquo;s &lt;code>useTransition&lt;/code> to defer heavy operations to maintain a stable framerate in demanding situations — something that vanilla Three.js cannot achieve.&lt;/p>
&lt;p>More info &lt;a class="link" href="https://r3f.docs.pmnd.rs/advanced/scaling-performance#enable-concurrency" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h3 id="state-management">State management
&lt;/h3>&lt;p>While it was really nice being able to let state flow through into the 3D parts of the application, it did mean that we needed to be keenly aware of how the different render cycles might impact one another. React, of course, has it&amp;rsquo;s own way to manage when and where it should render things.&lt;/p>
&lt;p>Where this rears it&amp;rsquo;s head is when considering how things such as materials are instantiated. With our components being managed by the React, while we get some niceties such as automatic disposing of unused materials etc., we can easily fall into the trap of repeatedly instantiating objects. For example, even for a simple box, if every render means we&amp;rsquo;re re-creating geometry and materials these will quickly add up.&lt;/p>
&lt;p>Memoisation, shared materials etc., or instancing can help here. In contrast, Babylon.js felt a little more simplified here from memory due to the in-engine code feeling quite divorced from the React wrapper.&lt;/p>
&lt;p>While covered in the documentation&amp;rsquo;s &lt;a class="link" href="https://r3f.docs.pmnd.rs/advanced/pitfalls" target="_blank" rel="noopener"
>performance pitfalls&lt;/a> section, one that can easily be missed is that we also need to be careful about when we call &lt;code>setState&lt;/code>.&lt;/p>
&lt;p>&lt;code>useFrame&lt;/code>, &lt;code>useLoader&lt;/code>, &lt;a class="link" href="https://github.com/pmndrs/gltfjsx" target="_blank" rel="noopener"
>&lt;code>GLTFJSX&lt;/code>&lt;/a> are all things that are provided to help avoid these pitfalls, but coming from a React-heavy background these gotchas could easily be missed.&lt;/p>
&lt;h3 id="refs-refs-everywhere">Refs, refs everywhere
&lt;/h3>&lt;p>I think the first thing that made me a slight sense of unease with R3F was that so many things needed to be wired up with &lt;code>useRef&lt;/code>. It&amp;rsquo;s certainly not uncommon nor unexpected to need to access a bunch of the underlying objects. Maybe we want to toggle a material&amp;rsquo;s visibility, or alter a mesh&amp;rsquo;s position.&lt;/p>
&lt;p>It quickly started to feel like a bit of ref hell, and while it was likely exacerbated by my willingness to let Copilot run away with its ideas (this was all part of the experiment), I quickly started losing track of all the refs flying around.&lt;/p>
&lt;p>Not terrible, and probably the only way to handle many of these cases, but it just felt like it was making things a little harder to hold than they really needed to be.&lt;/p>
&lt;h2 id="ai-ai">AI? AI.
&lt;/h2>&lt;p>Part of the experiment was seeing how Copilot held up to prompts. Now, I&amp;rsquo;m not about to become a &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/" >vibe coder&lt;/a>, but being realistic about the implications of AI in today&amp;rsquo;s software development landscape I was curious to see if Copilot could hold R3F in a usable way.&lt;/p>
&lt;p>I found Copilot to be quite usable, and this was without providing any custom instructions. Claude was unsurprisingly better than GPT, but I quickly ran out of free requests. I can imagine that with the appropriate hand-holding by way of global instructions etc., AI could be used as a significant accelerator to this kind of work — and as someone who does not have a strong foundation in 3D math, might actually help me get around some of those trickier 3D problems.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>Knowing that Babylon could absolutely tick all the boxes I needed it to, the question was largely whether Three.js could achieve the same or similar outcome, with the answer being a resounding yes.&lt;/p>
&lt;p>Honestly, that said I&amp;rsquo;m still not entirely sold on Three.js. Even with the tidy React integration that R3F provides, I can&amp;rsquo;t shake the feeling that it&amp;rsquo;s really still aimed at small-to-medium sized use cases. I&amp;rsquo;m not sure what might be involved in implementing a custom camera controller, for example, but it just didn&amp;rsquo;t feel like it would be quite so straightforward.&lt;/p>
&lt;p>I think at the end of the day, I would probably consider whether the 3D scene was going to be simple or complex, and how much UI needed to be wrapped around it.&lt;/p>
&lt;h2 id="update-babylonjs-answer-to-r3f">Update: Babylon.js&amp;rsquo; answer to R3F
&lt;/h2>&lt;p>So, I did eventually come back around to have a look at &lt;a class="link" href="https://brianzinn.github.io/react-babylonjs/examples/index" target="_blank" rel="noopener"
>react-babylon&lt;/a> — admittedly I wasn&amp;rsquo;t well aware of this option when I first decided to look into R3F. It&amp;rsquo;s probably thrown a little bit of a spanner in the works for me with regards to leaning towards Three.js &lt;em>because&lt;/em> it had such a nice integration with React.&lt;/p>
&lt;p>There isn&amp;rsquo;t a whole lot that R3F does that react-babylon doesn&amp;rsquo;t for their respective frameworks. I did find the documentation to be reasonably good for both, although there were a couple of areas which weren&amp;rsquo;t quite as well-documented, such as the need to wrap a &lt;code>&amp;lt;Model&amp;gt;&lt;/code> inside of a &lt;code>&amp;lt;Suspense&amp;gt;&lt;/code>.&lt;/p>
&lt;p>I had wrongfully assumed that without the &lt;code>&amp;lt;Suspense&amp;gt;&lt;/code> it would have just not shown anything while the mesh loaded, but that wasn&amp;rsquo;t the case — rather it caused a weird bug where much of the already-rendered objects were duplicated. It wasn&amp;rsquo;t really obvious what caused this, and it was through trial and error that I discovered where I&amp;rsquo;d gone astray.&lt;/p>
&lt;p>I did later stumble across a tiny entry in the documentation which speaks to the need for a wrapping &lt;code>&amp;lt;Suspense&amp;gt;&lt;/code> if using the &lt;code>SceneLoader&lt;/code> or &lt;code>AssetManager&lt;/code> hooks, and I assume these are used under the hood when using the &lt;code>&amp;lt;Model&amp;gt;&lt;/code> component directly.&lt;/p>
&lt;h3 id="asset-management">Asset management
&lt;/h3>&lt;p>Asset management in general, or more particularly caching loaded assets, seemed less straightforward than with R3F. Where R3F offers a &lt;code>useLoader&lt;/code> hook that &lt;a class="link" href="https://r3f.docs.pmnd.rs/advanced/scaling-performance#caching-with-useloader" target="_blank" rel="noopener"
>automatically caches loaded assets&lt;/a>, it appears that a little manual effort is required for react-babylon with the use of an &lt;a class="link" href="https://brianzinn.github.io/react-babylonjs/examples/hooks/asset-manager#useassetmanager" target="_blank" rel="noopener"
>asset manager&lt;/a>.&lt;/p>
&lt;p>This might actually be preferred in some circumstances — likely leaning back into the idea that Babylon.js is more suited to those larger projects where more careful management of asset caching is required.&lt;/p>
&lt;h3 id="the-shiny-bits">The shiny bits
&lt;/h3>&lt;p>I did enjoy coming back to Babylon.js and having a few things working a bit more nicely out of the box. Shadows felt like a first-class citizen, and I could easily switch a camera between orthographic and perspective views. Additionally, I know from experience that XR controls in Babylon.js are ready out-of-the-box, where Three.js didn&amp;rsquo;t seem to come with anything bar headset tracking.&lt;/p>
&lt;p>I think a major deciding factor between the two is going to be considering whether we&amp;rsquo;re happy to keep things as they are out of the box or not. Where Babylon.js offers a lot, I&amp;rsquo;m unsure as to how easy it is to modify their implementations. Three.js on the other hand looks to require either community plugins or manual work, but in doing so opens the door to a bit more flexibility.&lt;/p>
&lt;h3 id="state-management-1">State management
&lt;/h3>&lt;p>As a small aside, I did find react-babylon a little easier to hold than R3F with regards to state management, but I&amp;rsquo;m willing to put this entirely down to having a second bite of the cherry, and being a little more aware of how I was handling state and how it interacted across the React and frame loop boundaries.&lt;/p>
&lt;p>All of the above still applies here however. There is still some complexity in managing the additional re-rendering of components compared to simply serving a file that renders a canvas and initialises the engine.&lt;/p>
&lt;h3 id="the-escape-hatch">The escape hatch
&lt;/h3>&lt;p>Something I didn&amp;rsquo;t recall seeing in R3F, or rather the specific Drei implementations I was using, was a way to easily access objects outside of using a &lt;code>ref&lt;/code>. React-babylon offers a very useful &lt;code>onCreated&lt;/code> prop on all the elements to serve as an escape hatch, allowing us to revert to Babylon.js&amp;rsquo; imperative approach.&lt;/p>
&lt;p>I found this to be quite helpful in a few cases — in particular when loading a mesh and needing to traverse all the sub-meshes to apply materials. Similar results in R3F were achieved by loading the mesh and applying the materials outside of our markup, then rendering it using a &lt;code>&amp;lt;primitive object={object} /&amp;gt;&lt;/code>.&lt;/p>
&lt;p>Super useful, and really helped to avoid feeling like I was being locked into a specific usage pattern.&lt;/p>
&lt;h3 id="the-inspector">The Inspector
&lt;/h3>&lt;p>I know I mentioned this earlier, but Babylon.js&amp;rsquo; &lt;a class="link" href="https://doc.babylonjs.com/toolsAndResources/inspector" target="_blank" rel="noopener"
>Inspector&lt;/a> is such an incredibly useful tool for debugging a scene. In particular, I had some issues with setting up a material at first, and being able to make changes on the fly and see how it impacted the scene directly made for a really quick fix.&lt;/p>
&lt;p>Certainly, one of those tools you would just rather have access to.&lt;/p>
&lt;h2 id="conclusion-the-er-updated-one">Conclusion&amp;hellip; the, er, updated one
&lt;/h2>&lt;p>Very tricky, honestly.&lt;/p>
&lt;p>I found Three.js and it&amp;rsquo;s respective integration with React to be more intuitive, but the overall documentation lacking. The out-of-the-box features were thin, but understandably so as it is more intended as a lightweight 3D rendering engine. I did find however that when things didn&amp;rsquo;t fit the R3F / Drei mould perfectly, it could get quite messy very quickly.&lt;/p>
&lt;p>Babylon.js continues to impress with what it does offer, and aside from the Inspector there are a slew of &lt;a class="link" href="https://doc.babylonjs.com/toolsAndResources/" target="_blank" rel="noopener"
>other tools&lt;/a> available, including some which surprisingly didn&amp;rsquo;t seem to be linked on that page such as this &lt;a class="link" href="https://www.babylonjs.com/tools/ibl/" target="_blank" rel="noopener"
>IBL Tool&lt;/a> for converting HDRI environments to Babylon.js&amp;rsquo; &lt;a class="link" href="https://doc.babylonjs.com/features/featuresDeepDive/materials/using/HDREnvironment/#what-is-a-env-tech-deep-dive" target="_blank" rel="noopener"
>preferred &lt;code>.env&lt;/code> format&lt;/a>.&lt;/p>
&lt;p>I still find myself landing on the idea that Three.js is great if you want to move quickly and have a known, smaller scope. I could certainly see feature creep causing some significant unforeseen manual implementations, which creates an inherent risk with using this tool.&lt;/p>
&lt;p>Suffice to say, Babylon.js isn&amp;rsquo;t immune to risks such as this. Much like using a standard web UI library, there&amp;rsquo;s a trade-off between the ease of using out-of-the-box components and flexibility. There is of course a chance that what Babylon offers isn&amp;rsquo;t quite what we&amp;rsquo;re after, and we may not be able to simply tweak it to suit our use case.&lt;/p>
&lt;p>All that said and done, I do find myself feeling pulled towards Babylon.js, particularly for some niceties such as shadows just working as one would expect.&lt;/p></description></item><item><title>Cursor: Are the vibes really worth it?</title><link>https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/cover.jpg" alt="Featured image of post Cursor: Are the vibes really worth it?" />&lt;p>Alright, I&amp;rsquo;ve scoffed enough at the ridiculous notion of &lt;a class="link" href="https://en.wikipedia.org/wiki/Vibe_coding" target="_blank" rel="noopener"
>vibe coding&lt;/a>. Time to give &lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
>Cursor&lt;/a> a whirl.&lt;/p>
&lt;p>No, I&amp;rsquo;m not about to become a vibe coder. But I have found the concept of Cursor intriguing, and I can&amp;rsquo;t help but to be curious about what the tool has to offer. GitHub Copilot has only been able to feel like a roided-up Intellisense — maybe Cursor can actually feel like the magic AI assistant I was promised.&lt;/p>
&lt;p>To be completely fair to Cursor, I wanted to see how it performed without going into setting up custom &lt;a class="link" href="https://docs.cursor.com/context/rules-for-ai" target="_blank" rel="noopener"
>project rules&lt;/a> and in hindsight I &lt;em>may&lt;/em> not have set it up entirely for success.&lt;/p>
&lt;h2 id="a-brand-new-project-for-a-brand-new-world">A brand new project for a brand new world
&lt;/h2>&lt;p>I wanted to experience the deep end of the magic first. I wanted to see what the whole &amp;ldquo;build me an app&amp;rdquo; felt like, and so I decided to go straight down that path.&lt;/p>
&lt;p>My first impression wasn&amp;rsquo;t exactly great. I knew based on what I had read online that Svelte 5 probably wasn&amp;rsquo;t going to be too well supported due to models having been trained on Svelte 4, and indeed it took some coaxing and I even needed to provide a link to the latest documentation to get it to use the new &lt;a class="link" href="https://svelte.dev/docs/cli/overview" target="_blank" rel="noopener"
>Svelte CLI&lt;/a>.&lt;/p>
&lt;p>While impressive that it did get there once I poked and prodded it a bit, it was also quick to go off one some very opinionated tangents, such as jumping straight into using &lt;a class="link" href="https://orm.drizzle.team/" target="_blank" rel="noopener"
>Drizzle&lt;/a> for data persistence. Not my first choice, and it was lumped in with a bunch of other changes that wouldn&amp;rsquo;t have been fun to untangle.&lt;/p>
&lt;p>I knew ahead of time this might happen, and so I decided to park Svelte for the time being. React it is!&lt;/p>
&lt;h3 id="react">React
&lt;/h3>&lt;p>React had the same problem that Svelte did re: not using the Svelte CLI. It immediately tried to use the deprecated &lt;a class="link" href="https://create-react-app.dev/docs/getting-started/" target="_blank" rel="noopener"
>create-react-app&lt;/a>, and only decided to use Vite after I explicitly told it to. Not a &lt;em>great&lt;/em> start, but not the hardest thing to work around.&lt;/p>
&lt;p>I could see this being a problem for the true vibe coders out there, although to be fair I didn&amp;rsquo;t really give Cursor a chance to see any deprecation warnings and adjust accordingly. Maybe it would have realised?&lt;/p>
&lt;p>As far as setting up components and state management, it wrote pretty close to the sort of code I&amp;rsquo;d expect to see. I was pretty happy with this, at least while things were in a simple state.&lt;/p>
&lt;h4 id="tailwindnt">Tailwindn&amp;rsquo;t
&lt;/h4>&lt;p>I asked Cursor to improve the styling across my components, and it jumped enthusiastically into the task. I was watching a bunch of the code it was generating and it was getting &lt;em>busy&lt;/em>. But I wasn&amp;rsquo;t seeing any styling changes!&lt;/p>
&lt;p>Turns out, Cursor ❤️ Tailwind. But Cursor hadn&amp;rsquo;t &lt;em>installed&lt;/em> Tailwind. D&amp;rsquo;oh!&lt;/p>
&lt;p>Easy enough fix, but it did highlight that it could go off on and start using tools that you hadn&amp;rsquo;t even asked it to. I&amp;rsquo;m honestly still not sold on Tailwind anyway, and I probably wouldn&amp;rsquo;t have gone for it had it asked me first. Ah well, embrace the vibe, right?&lt;/p>
&lt;p>It took me quite a few round trips of &amp;ldquo;didn&amp;rsquo;t work, here&amp;rsquo;s my error&amp;rdquo; and ultimately an &amp;ldquo;is Tailwind even installed?&amp;rdquo; before it actually figured out what was wrong.&lt;/p>
&lt;h4 id="tailwindd">Tailwind&amp;rsquo;d
&lt;/h4>&lt;p>With Tailwind &lt;em>actually&lt;/em> installed now, I was pleasantly surprised at how the front end looked with a few nudges in the direction I wanted it to go. I had asked for modern, card-based styling, and that&amp;rsquo;s pretty much what I received.&lt;/p>
&lt;p>It wasn&amp;rsquo;t perfect, there were some areas where padding was missing or inputs were hard to read, but overall I was quite impressed with what it spat out. I am curious to see if adding &lt;a class="link" href="https://playwright.dev/docs/accessibility-testing" target="_blank" rel="noopener"
>automated accessibility tests&lt;/a> or other might help to keep things on track re: the obvious contrast issues in the inputs.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/images/illegible-inputs.jpg"
width="810"
height="501"
srcset="https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/images/illegible-inputs_hu_ea6d9f55b916fc64.jpg 480w, https://vivecuervo7.github.io/dev-blog/p/cursor-vibe-check/images/illegible-inputs_hu_547cafdc3cb6f86d.jpg 1024w"
loading="lazy"
alt="Cursor didn’t quite get the input styling right"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h3 id="net-core">.NET Core
&lt;/h3>&lt;p>I was pretty impressed with what it did here, as much as I enjoy using .NET Core I find that there&amp;rsquo;s often a lot of code that needs to be written across many files.&lt;/p>
&lt;p>Cursor was able to create a bunch of the files that I would have otherwise had to write myself, all with minimal prompting. Awesome! Except, half the files were in the wrong directory. It had gone and created a &lt;code>backend/&lt;/code> directory, and then dumped my &lt;code>Program.cs&lt;/code> file outside of that, along with some other files. Another prompt re-created the files in the correct place but didn&amp;rsquo;t clean up the old ones.&lt;/p>
&lt;p>Even once it started putting things in the right places, refactorings indicated a similar disdain for cleaning things up. I do really wonder if putting the right tooling around Cursor might help with a lot of these issues, as it showed a good responsiveness to linter errors and warnings in the frontend project. Perhaps exposing similar errors to Cursor would guide it towards making better decisions.&lt;/p>
&lt;p>CORS issues came up — just like a real programmer! — and took another couple of spins on the merry-go-round before they were resolved. So far, I&amp;rsquo;ve been impressed by Cursor&amp;rsquo;s ability to resolve these issues, but somewhat unimpressed by the number of false resolutions.&lt;/p>
&lt;p>A minor frustration was a perceived disconnect between the Postgres database credentials and our configuration. Despite the database connection working perfectly, it kept accusing the configuration of being wrong and would keep changing the database credentials and/or the appsettings. I decided to let it do its thing, and while it didn&amp;rsquo;t necessarily break things it did get annoying.&lt;/p>
&lt;h4 id="do-as-i-say-not-as-i-do">Do as I say, not as I do?
&lt;/h4>&lt;p>The biggest and most glaring issue encountered was in the, you know, not super-duper-important auth service, where it had written some code and whacked a comment above it essentially saying &amp;ldquo;don&amp;rsquo;t do this in production&amp;rdquo;. Whoops? I can definitely imagine a true vibe coder missing this altogether. If I&amp;rsquo;m being honest, I missed it until I was reviewing the output many commits later.&lt;/p>
&lt;p>&lt;em>Maybe&lt;/em> some tooling could have shown an error here? I&amp;rsquo;m planning to also look into &lt;a class="link" href="https://www.coderabbit.ai/" target="_blank" rel="noopener"
>CodeRabbit&lt;/a> for AI code review. It would be curious to watch an AI tool telling another to get it&amp;rsquo;s sh*t together.&lt;/p>
&lt;h4 id="ef-core">EF Core
&lt;/h4>&lt;p>Par for the course so far, things didn&amp;rsquo;t go perfectly at first although they did work in the end — which is the most important thing, right? Vibes!&lt;/p>
&lt;p>No, it did a pretty good job at setting up and leveraging migrations, and this was pretty hands-off in general. One of the things that I find tedious with .NET development in general is the need to go and write a migration, apply it, update my model, update the DB context, all before I can even go and start using the new or updated entity. Cursor was definitely working hard to save me keystrokes here.&lt;/p>
&lt;p>I don&amp;rsquo;t know if my trust issues would start to surface if and when it came time to actually migrate some data around though.&lt;/p>
&lt;h2 id="a-brand-old-project-for-a-brand-new-world">A brand old* project for a brand new world
&lt;/h2>&lt;p>Sweet, Cursor seems to be capable of building a brand spanking new project. But what about an existing project that already has some conventions about how to do things?&lt;/p>
&lt;p>Given that Cursor seemed to have some trouble swallowing Svelte earlier, I decided to try loading an existing SvelteKit project. Specifically, this project is using Svelte 5, which has a significantly different syntax to previous versions — and this has been Cursor&amp;rsquo;s tripping point.&lt;/p>
&lt;p>Let&amp;rsquo;s see how it handles some change requests!&lt;/p>
&lt;h3 id="starting-small">Starting small
&lt;/h3>&lt;p>I wanted to ask it to specifically make changes to a single file. In the true spirit of side projects I&amp;rsquo;d been a bit lax in keeping any relevant documentation up to date, and so I asked Cursor to update my root &lt;code>README.md&lt;/code> file to improve the project&amp;rsquo;s documentation.&lt;/p>
&lt;p>Granted, there wasn&amp;rsquo;t a whole lot that needed to be written, but it did a solid job of inspecting the project to determine the tech stack, prerequisites, steps for getting started etc.&lt;/p>
&lt;p>The only issue was that for some reason despite the project using &lt;code>npm&lt;/code>, Cursor decided to recommend &lt;code>pnpm&lt;/code> and use that for a bunch of examples. A quick prompt sorted that out, but again this could have easily been missed.&lt;/p>
&lt;h3 id="database-migration">Database migration
&lt;/h3>&lt;p>Okay, I was pretty impressed with this one. I wasn&amp;rsquo;t expecting it to pick up on my using &lt;a class="link" href="https://vivecuervo7.github.io/dev-blog/p/database-driven-codegen/#graphile-migrate" target="_blank" rel="noopener"
>graphile-migrate&lt;/a> in this project, but it had a look at the tooling and it correctly updated my &lt;code>current.sql&lt;/code> migration file. Nice!&lt;/p>
&lt;p>Using a prompt to &amp;ldquo;create a migration allowing for league member&amp;rsquo;s to assign teams for each round&amp;rdquo;, it created the table I would have expected to see, along with indexes and even a trigger to enforce the team size limit.&lt;/p>
&lt;p>It didn&amp;rsquo;t pick up on the need for the migration to be idempotent, but a quick prompt and it was back on track.&lt;/p>
&lt;h3 id="a-little-more-complicated">A little more complicated
&lt;/h3>&lt;p>I went through a series of prompts, from simply showing new information to adding an entire new form.&lt;/p>
&lt;p>Cursor picked up on the use of Kysely to build queries, continuing with a repository pattern and implementing database queries as necessary. It proved to be similarly competent when it came to building UI components, inserting the new code and resolving linting errors to come up with a working solution.&lt;/p>
&lt;p>Where Cursor ran into a bit of a wall was accessing the database service. I had settled on a usage pattern of initialising the database service and passing it down the chain via &lt;a class="link" href="https://svelte.dev/docs/kit/hooks#Server-hooks-locals" target="_blank" rel="noopener"
>locals&lt;/a>. Granted, this isn&amp;rsquo;t the most common approach (most tutorials suggest simply importing the database client and using it directly) however I thought there would be enough code there for Cursor to figure out the usage pattern.&lt;/p>
&lt;p>Alas, every time Cursor wanted to use the database service, it would attempt to instantiate a new copy of it. Not what I had wanted at all, and despite a prompt fixing it on one occasion I found it faster to just go and clean up after it. I &lt;em>did&lt;/em> eventually see Cursor pick up on a linting error and subsequently explain to me that it should be using the &lt;code>locals.db&lt;/code> instead of creating a new one, so maybe I was just trying to fix Cursor&amp;rsquo;s mistakes a little too eagerly.&lt;/p>
&lt;h2 id="overall-impressions">Overall impressions
&lt;/h2>&lt;p>Honestly, it felt like taking a machine gun to my code. It felt very &lt;a class="link" href="https://fallout.fandom.com/wiki/Spray_n%27_Pray" target="_blank" rel="noopener"
>Spray n&amp;rsquo; Pray&lt;/a>, and there was a &lt;em>lot&lt;/em> of &amp;ldquo;yeah, I&amp;rsquo;m just going to commit here because I&amp;rsquo;m probably going to throw away the next change a few times before it&amp;rsquo;s right&amp;rdquo;. The problem was that each thing I wanted to do would take multiple prompts, which made me quite hesitant to discard whatever I had so I would keep throwing prompts at it to try and make it right. That led to me feeling too invested (why hello, &lt;a class="link" href="https://thedecisionlab.com/biases/the-sunk-cost-fallacy" target="_blank" rel="noopener"
>sunk cost fallacy&lt;/a>) to throw it all away.&lt;/p>
&lt;p>A big sticking point for me was the potential for insecure code to make its way into the codebase. I don&amp;rsquo;t think I trust it fully to keep things secure, pending wrapping additional tooling around it. Even then, it would require a close watch and there is just so much code being generated in such a short amount of time that it&amp;rsquo;s hard to pick up on little things.&lt;/p>
&lt;p>Cursor did doing a pretty good job of coming up with meaningful commit messages, although they got pretty long-winded which exposes an actual underlying problem in that the changes themselves can easily become quite extensive with a series of iterative prompts causing many files to be touched.&lt;/p>
&lt;h3 id="cursor-turned-me-into-a-rubber-duck">Cursor turned me into a rubber duck
&lt;/h3>&lt;p>Cursor felt like speed-running a &lt;a class="link" href="https://en.wikipedia.org/wiki/Pair_programming" target="_blank" rel="noopener"
>pair programming&lt;/a> session with a coked-up auctioneer as the driver.&lt;/p>
&lt;p>It talks through the decisions it&amp;rsquo;s making, and shows you the code being generated. I found I could &lt;em>just&lt;/em> keep up with it, occasionally spotting things that I wanted to ask about or prompt in another direction. It was nice to have that immediate feedback and it mitigated the feeling of blindly trusting Cursor to come up with a good solution, but there was an absolute flood of code to try and parse in very little time.&lt;/p>
&lt;p>In particular, I found it curious to watch how it went about debugging issues, or more specifically the way it went about addressing linting errors and warnings. I wasn&amp;rsquo;t too impressed about the nonchalant way it dismissed warnings as essentially &amp;ldquo;meh, not critical so don&amp;rsquo;t bother&amp;rdquo; but we could either prompt it to address those concerns or just configure our project to treat warnings as errors etc.&lt;/p>
&lt;h3 id="cursors-rules-for-ai">Cursor&amp;rsquo;s rules for AI
&lt;/h3>&lt;p>As mentioned at the top of this post I did not make use of Cursor&amp;rsquo;s &lt;a class="link" href="https://docs.cursor.com/context/rules-for-ai" target="_blank" rel="noopener"
>rules for AI&lt;/a>, which I imagine may have mitigated if not completely avoided many of the issues I ended up facing.&lt;/p>
&lt;p>I may do a deep dive into these rules in the future to do a comparison — especially regarding the use of Svelte 5, as this proved to be something of a sticking point. A very quick dabble in this yielded the ability to specify any particular tooling that I wished to use — telling it to use Svelte 5, Kysely and &lt;code>graphile-migrate&lt;/code> did a pretty good job, although it still had trouble with the Svelte 5 syntax.&lt;/p>
&lt;p>There are plenty of sample &lt;code>.cursorrules&lt;/code> files floating around — these are being phased out per the docs above in favour of &lt;code>.cursor/rules/&lt;/code> but still provide a good base for building the rules themselves. &lt;a class="link" href="https://gist.github.com/aashari/07cc9c1b6c0debbeb4f4d94a3a81339e" target="_blank" rel="noopener"
>Here&amp;rsquo;s an example&lt;/a> of a relatively comprehensive set of general purpose Cursor rules.&lt;/p>
&lt;p>And&amp;hellip; we can always ask Cursor to generate a set of rules for itself based on the current project!&lt;/p>
&lt;p>I do get the sense that with the right rules Cursor could be kept largely in check, but I can&amp;rsquo;t help wondering if constantly tweaking those rules and needing to gauge the output might start eating significantly into whatever time Cursor initially saved.&lt;/p>
&lt;h3 id="does-it-have-a-place-in-my-workflow">Does it have a place in my workflow?
&lt;/h3>&lt;p>The biggest question of them all, and truth be told, I don&amp;rsquo;t really know.&lt;/p>
&lt;p>A day spent playing with it doesn&amp;rsquo;t really give it the time it needs to really show its full potential — or frustrations, nor does the fact that I largely ignored setting up any rules.&lt;/p>
&lt;p>I can certainly see how I might prefer this over GitHub Copilot purely due to the fact that it can use the entire codebase as context for my next operation — but I think for now I&amp;rsquo;d prefer to keep the changes scoped to the file I&amp;rsquo;m working on.&lt;/p>
&lt;p>Cursor passes the vibe check, but of me a vibe coder it shall not make.&lt;/p></description></item><item><title>PostCSS: Styling without the Sass</title><link>https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/less-sass-with-postcss/cover.jpg" alt="Featured image of post PostCSS: Styling without the Sass" />&lt;p>Whenever I decide to do any programming outside of work hours, I like to pick up a bunch of tools that I don&amp;rsquo;t get to touch in my day-to-day, even if it&amp;rsquo;s just so side projects don&amp;rsquo;t &lt;em>feel&lt;/em> like work.&lt;/p>
&lt;p>Sometimes, I stumble across some tooling that I want to roll into my standard workflow — &lt;a class="link" href="https://postcss.org/" target="_blank" rel="noopener"
>PostCSS&lt;/a> being one that I&amp;rsquo;ve stumbled across a couple of times now and decided to cobble together something a little firmer than just a &amp;ldquo;hey, I tried this and I liked it&amp;rdquo;. More specifically, I have found myself leaning towards PostCSS as a replacement for the default of dragging Sass into every new project I&amp;rsquo;ve worked on.&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong — Sass is and has been a great tool to use over the years, but I feel as though I&amp;rsquo;ve only ever really needed a fraction of what it offers. Not to mention that the growth of CSS itself has slowly started eating away at the benefits I&amp;rsquo;ve found in Sass, such as nesting or variables.&lt;/p>
&lt;h2 id="what-is-postcss">What is PostCSS
&lt;/h2>&lt;p>Or maybe it&amp;rsquo;s easier to talk about what it isn&amp;rsquo;t.&lt;/p>
&lt;p>It certainly isn&amp;rsquo;t a pre-processor like Sass or Less. It doesn&amp;rsquo;t use a different syntax the way these pre-processors do, allowing us to instead write standard CSS. Which is good for newcomers who may not be familiar with a particular flavour of pre-processor!&lt;/p>
&lt;p>It also isn&amp;rsquo;t strictly a &lt;em>post&lt;/em>-processor, despite the name alluding to such. The rich plugin ecosystem really allows it to act as both a pre- and post-processor. It&amp;rsquo;s modular, and highly flexible — you could even keep your desired pre-processor around. This isn&amp;rsquo;t an either-or scenario.&lt;/p>
&lt;h3 id="ok-so-what-is-it">Ok&amp;hellip; so, what &lt;em>is&lt;/em> it?
&lt;/h3>&lt;p>PostCSS is, in their own words, &amp;ldquo;a tool for transforming CSS with JavaScript&amp;rdquo;.&lt;/p>
&lt;p>What PostCSS does is transpile your written CSS into JavaScript, allowing us to process it before writing it back as CSS. By itself, it doesn&amp;rsquo;t actually transform anything — for that we&amp;rsquo;ll need to tap into the plugins available to PostCSS.&lt;/p>
&lt;p>On the topic of plugins, there are a few of them in the wild which are regularly used — often without the explicit intention to use PostCSS. &lt;a class="link" href="https://autoprefixer.github.io/" target="_blank" rel="noopener"
>Autoprefixer&lt;/a>, &lt;a class="link" href="https://cssnano.github.io/cssnano/" target="_blank" rel="noopener"
>cssnano&lt;/a> and &lt;a class="link" href="https://stylelint.io/" target="_blank" rel="noopener"
>Stylelint&lt;/a> are all commonly used PostCSS plugins, meaning there&amp;rsquo;s a good chance you&amp;rsquo;ve already used PostCSS!&lt;/p>
&lt;h3 id="wait-so-if-its-not-a-pre-processor">Wait, so if it&amp;rsquo;s &lt;em>not&lt;/em> a pre-processor&amp;hellip;
&lt;/h3>&lt;p>Yep, that&amp;rsquo;s right. You can stick with your trusty Sass, Less, or Stylus.
Or, you could bring in a few plugins to get your pre-processor-like functionality. This is where a lot of my interest in PostCSS started, looking at it as a potential drop-in replacement for Sass entirely. I&amp;rsquo;ll cover some of &lt;a class="link" href="#postcss-the-pre-processor" >those specific plugins below&lt;/a>.&lt;/p>
&lt;h2 id="plugins">Plugins
&lt;/h2>&lt;p>All the useful things you can do with PostCSS come from plugins. Below we&amp;rsquo;ll have a look at some of the plugins that I&amp;rsquo;ve found consistently seem to bubble up as the more useful picks.&lt;/p>
&lt;p>If you want to see &lt;em>all&lt;/em> of the plugins, &lt;a class="link" href="https://postcss.org/docs/postcss-plugins" target="_blank" rel="noopener"
>here is a good place to start&lt;/a>.&lt;/p>
&lt;h3 id="the-plugins-you-probably-want">The plugins you probably want
&lt;/h3>&lt;p>&lt;strong>Autoprefixer&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/postcss/autoprefixer?tab=readme-ov-file" target="_blank" rel="noopener"
>Autoprefixer&lt;/a> adds vendor prefixes to your CSS using rules from &lt;a class="link" href="https://caniuse.com/" target="_blank" rel="noopener"
>Can I Use&lt;/a>. Forget about manually writing vendor prefixes entirely! Stylelint can also be configured to &lt;a class="link" href="https://stylelint.io/user-guide/rules/property-no-vendor-prefix/" target="_blank" rel="noopener"
>disallow writing vendor prefixes&lt;/a> too, so you don&amp;rsquo;t even need to remember to forget about vendor prefixes.&lt;/p>
&lt;p>&lt;strong>cssnano&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/cssnano/cssnano?tab=readme-ov-file" target="_blank" rel="noopener"
>cssnano&lt;/a> makes your CSS small. It&amp;rsquo;s a minifier that compresses your CSS to reduce your overall bundle size. There are a few presets, the default being a safe option, making it easy enough to drop in that it seems almost silly to &lt;em>not&lt;/em> include it. The &lt;a class="link" href="https://cssnano.github.io/cssnano/docs/what-are-optimisations/" target="_blank" rel="noopener"
>full list of optimisations can be found here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Stylelint&lt;/strong>&lt;/p>
&lt;p>Ok, ok. You probably won&amp;rsquo;t install this as a plugin the way you will the others, but it&amp;rsquo;s still a PostCSS plugin so I&amp;rsquo;ll include it here. &lt;a class="link" href="https://stylelint.io/" target="_blank" rel="noopener"
>Stylelint&lt;/a> is simply put, a linting tool for your CSS. There are a &lt;a class="link" href="https://stylelint.io/user-guide/rules" target="_blank" rel="noopener"
>bunch of useful rules&lt;/a> that are worth perusing.&lt;/p>
&lt;p>If the rules included with Stylelint aren&amp;rsquo;t quite enough for you, there are a bunch of &lt;a class="link" href="https://github.com/stylelint/awesome-stylelint" target="_blank" rel="noopener"
>plugins, configs and integrations&lt;/a> available. Just in case you need plugins for your plugins.&lt;/p>
&lt;h3 id="tomorrows-css-today">Tomorrow&amp;rsquo;s CSS, today
&lt;/h3>&lt;p>This one is in my opinion one of the most powerful and compelling reasons to use PostCSS, so it&amp;rsquo;s getting its own section.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env" target="_blank" rel="noopener"
>PostCSS Preset Env&lt;/a> essentially allows us to use modern CSS without worrying about it not being supported in a bunch of browsers (looking at you, &lt;del>Internet Explorer&lt;/del> Safari). By leveraging &lt;a class="link" href="https://cssdb.org/" target="_blank" rel="noopener"
>CSSDB&lt;/a> and your specified browser targets, it automatically includes the necessary plugins to ensure consistent behavior across different environments.&lt;/p>
&lt;p>You can even start using experimental or proposed CSS features. PostCSS Preset Env&amp;rsquo;s complete feature list can be found &lt;a class="link" href="https://github.com/csstools/postcss-plugins/blob/main/plugin-packs/postcss-preset-env/FEATURES.md" target="_blank" rel="noopener"
>here&lt;/a>. Some favourites are listed below:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://cssdb.org/#custom-media-queries" target="_blank" rel="noopener"
>custom-media-queries&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cssdb.org/#custom-selectors" target="_blank" rel="noopener"
>custom-selectors&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cssdb.org/#light-dark-function" target="_blank" rel="noopener"
>light-dark-function&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="sass-like-functionality">Sass-like functionality
&lt;/h3>&lt;p>The last time I looked at bringing in a bunch of Sass-like functionality, I found myself installing a bunch of plugins for all the various things. Those individual plugins are still available if you really want to bring them in individually, such as &lt;a class="link" href="https://github.com/postcss/postcss-mixins" target="_blank" rel="noopener"
>postcss-mixins&lt;/a>.&lt;/p>
&lt;p>It looks as though the easiest path to similar functionality might be to just go straight for &lt;a class="link" href="https://github.com/csstools/postcss-advanced-variables?tab=readme-ov-file" target="_blank" rel="noopener"
>postcss-advanced-variables&lt;/a>. This plugin brings Sass-like &lt;code>$variables&lt;/code>, &lt;code>@if&lt;/code>, &lt;code>@else&lt;/code>, &lt;code>@for&lt;/code> and &lt;code>@each&lt;/code> rules, as well as &lt;code>@mixin&lt;/code> rules. And honestly, with nesting already supported, this covers 90% of the things I really got out of Sass anyway. A counterpart for Sass&amp;rsquo; maps exists in &lt;a class="link" href="https://github.com/Scrum/postcss-map-get" target="_blank" rel="noopener"
>postcss-map-get&lt;/a>, and really the last missing piece is support for functions.&lt;/p>
&lt;p>To that end, it seems the Sass-like &lt;a class="link" href="https://github.com/mcattx/postcss-define-function" target="_blank" rel="noopener"
>postcss-define-function&lt;/a> plugin for this hasn&amp;rsquo;t seen any love in a while — and I&amp;rsquo;d probably consider using &lt;a class="link" href="https://github.com/andyjansson/postcss-functions" target="_blank" rel="noopener"
>postcss-functions&lt;/a> which is a bit different in that it leans towards defining functions in JavaScript.&lt;/p>
&lt;p>If I found myself needing any other features that weren&amp;rsquo;t readily available via existing plugins I&amp;rsquo;d likely start considering a move to just go back to using Sass, but I think the above would cover just about all the functionality I&amp;rsquo;ve actually used over the past few years.&lt;/p>
&lt;p>&lt;strong>TL;DR&lt;/strong> &lt;a class="link" href="https://github.com/csstools/postcss-advanced-variables?tab=readme-ov-file" target="_blank" rel="noopener"
>postcss-advanced-variables&lt;/a> and &lt;a class="link" href="https://github.com/Scrum/postcss-map-get" target="_blank" rel="noopener"
>postcss-map-get&lt;/a> is &lt;em>probably&lt;/em> going to give you most of what you&amp;rsquo;re using Sass for today.&lt;/p>
&lt;h3 id="writing-custom-plugins">Writing custom plugins
&lt;/h3>&lt;p>While I haven&amp;rsquo;t found the need to do this myself, PostCSS also purports to make it fairly straightforward to &lt;a class="link" href="https://postcss.org/docs/writing-a-postcss-plugin" target="_blank" rel="noopener"
>write your own custom plugins&lt;/a>, which is a huge leap from being at the mercy of whatever functionality is offered by one of the pre-processor options.&lt;/p>
&lt;p>Chances are however that you&amp;rsquo;ll generally find what you&amp;rsquo;re after. There are even existing plugins &lt;a class="link" href="https://github.com/sebdeckers/postcss-imperial" target="_blank" rel="noopener"
>to let you use yards, feet and twips&lt;/a>! Don&amp;rsquo;t do that, though.&lt;/p></description></item><item><title>Harnessing database-driven code generation</title><link>https://vivecuervo7.github.io/dev-blog/p/database-driven-codegen/</link><pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/database-driven-codegen/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/database-driven-codegen/cover.jpg" alt="Featured image of post Harnessing database-driven code generation" />&lt;p>As I started to really dive into SvelteKit, I couldn&amp;rsquo;t help but find myself drawn to this idea of writing as little code as possible. Don&amp;rsquo;t get me wrong — I still love working with C#, and honestly it&amp;rsquo;s still where I&amp;rsquo;d turn to in a heartbeat if I had need to model a complex business domain.&lt;/p>
&lt;p>I haven&amp;rsquo;t been able to shake the thought though, that quite often we end up building rather small applications that might be simpler and faster to write using one of the current full-stack meta-frameworks. While SvelteKit has been my poison of choice in that regard, what is outlined here is framework-agnostic and should be applicable to any of the current offerings.&lt;/p>
&lt;h2 id="orms-script-builders-raw-sql">ORMs, script builders, raw SQL&amp;hellip;
&lt;/h2>&lt;p>I have to admit to feeling a little lost when I first stepped into the idea of managing persistence without my trusty Entity Framework Core. Instinctively, I reached for an ORM and did some poking around.&lt;/p>
&lt;p>I came across &lt;a class="link" href="https://sveltekit.io/blog/drizzle-sveltekit-integration" target="_blank" rel="noopener"
>this fantastic post&lt;/a> outlining the usage of &lt;a class="link" href="https://orm.drizzle.team/" target="_blank" rel="noopener"
>Drizzle&lt;/a>. I was pretty excited, things looked nice and easy to implement. Getting started was fairly straightforward using a Postgres database, but as I looked around I started stumbling across discussions such as &lt;a class="link" href="https://github.com/thetutlage/meta/discussions/8" target="_blank" rel="noopener"
>this one&lt;/a> outlining the shortcomings of Drizzle.&lt;/p>
&lt;p>Nice as it was, I decided to keep looking.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://typeorm.io/" target="_blank" rel="noopener"
>TypeORM&lt;/a> looked like a long term player, but seemed to be an unpopular choice.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.prisma.io/" target="_blank" rel="noopener"
>Prisma&lt;/a> looked a bit more positive, but I mistook their &amp;ldquo;pricing&amp;rdquo; page to indicate it was a paid option, which I later discovered was not the case, however the ship had sailed by this point.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://mikro-orm.io/" target="_blank" rel="noopener"
>MikroORM&lt;/a> received the most praise based on my research, but wasn&amp;rsquo;t quite as easy to get set up as Drizzle.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>By this point I was pretty over the idea of using an ORM in TypeScript-land.&lt;/p>
&lt;h3 id="or-something-else">Or something else&amp;hellip;?
&lt;/h3>&lt;p>I have to credit &lt;a class="link" href="https://www.reddit.com/r/sveltejs/comments/1brdr07/comment/kx9ymr9/?utm_source=share&amp;amp;utm_medium=web3x&amp;amp;utm_name=web3xcss&amp;amp;utm_term=1&amp;amp;utm_content=share_button" target="_blank" rel="noopener"
>this post on Reddit&lt;/a> for pointing me in the direction I eventually found myself going in.&lt;/p>
&lt;p>While the post itself goes into using GraphQL which isn&amp;rsquo;t something I was particularly interested in, it did cause me to start looking into what a solution might look like if it were &lt;em>truly&lt;/em> data-driven — allowing your database to be the source of truth for your application.&lt;/p>
&lt;p>This resonated with me, as someone who typically preferred a data-first approach. It aligned very closely to my typical workflow in .NET where I&amp;rsquo;d use &lt;a class="link" href="https://dbup.readthedocs.io/en/latest/" target="_blank" rel="noopener"
>DbUp&lt;/a> to handle database migrations.&lt;/p>
&lt;h2 id="the-magic-sauce">The magic sauce
&lt;/h2>&lt;p>After a bit of a dig at just writing plain SQL, I decided to finally give &lt;a class="link" href="https://kysely.dev/" target="_blank" rel="noopener"
>Kysely&lt;/a> a crack — a simple, no-nonsense query builder for TypeScript. It had consistently received high praise wherever I had seen it mentioned, and suffice to say I was &lt;em>not&lt;/em> disappointed when I finally used it.&lt;/p>
&lt;p>But first, we need some data!&lt;/p>
&lt;h3 id="graphile-migrate">graphile-migrate
&lt;/h3>&lt;p>The aforementioned Reddit post eventually landed me on &lt;a class="link" href="https://github.com/graphile/migrate" target="_blank" rel="noopener"
>graphile-migrate&lt;/a> — a migration tool that introduced an interesting way to manage migrations.&lt;/p>
&lt;p>While I can certainly envision some scenarios that could get a little messy, the premise is that you would write your migrations to be idempotent. Writing your migrations to a &lt;code>current.sql&lt;/code> file would allow you to use the tool&amp;rsquo;s &lt;code>watch&lt;/code> mode, re-running the migration every time the file is changed.&lt;/p>
&lt;p>Once work on the &amp;ldquo;current&amp;rdquo; migration is complete it can be committed, which will move it into the committed folder as a migration ready to be run against a production database.&lt;/p>
&lt;p>Despite needing some additional thought to how best to write idempotent migrations, I found that in practice it allowed for a much more iterative workflow when compared to the usual sitting down and figuring out all of the data requirements as the very first step.&lt;/p>
&lt;p>We&amp;rsquo;ll use the following migration to illustrate how the other tools are used in a basic real-world scenario.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">current.sql&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">app_user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">cascade&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">league&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">cascade&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player_role&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player_role&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;batter&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;bowler&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;keeper&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;allrounder&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">app_user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">league&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gen_random_uuid&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">unique&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">owner_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">references&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">app_user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gen_random_uuid&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">league_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">references&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">league&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">on&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">cascade&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">role&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">player_role&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">image_url&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="kysely-codegen">kysely-codegen
&lt;/h3>&lt;p>Before we can work with &lt;a class="link" href="https://kysely.dev/" target="_blank" rel="noopener"
>Kysely&lt;/a>, we need to provide a database schema in a format that Kysely can understand. Database introspection isn&amp;rsquo;t something I&amp;rsquo;d done much of, and fortunately the Kysely documentation outlines a few tools that can aid with this.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/RobinBlomberg/kysely-codegen" target="_blank" rel="noopener"
>kysely-codegen&lt;/a> as one of their offering purports to work with all dialects supported by Kysely itself, so that was the one that I picked off the list.&lt;/p>
&lt;p>Configuration for &lt;code>graphile-migrate&lt;/code> allows for running commands at various points, such as after all migrations, or after just the current migration. This allowed for a simple way to run &lt;code>kysely-codegen&lt;/code> every time &lt;code>graphile-migrate&lt;/code>&amp;rsquo;s &lt;code>watch&lt;/code> function caused the migrations to re-run. Nice!&lt;/p>
&lt;p>Running &lt;code>kysely-codegen&lt;/code> against the database after the migration above was applied yields the following.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">db-schema.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This file was generated by kysely-codegen.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Please do not edit it manually.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="kr">type&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ColumnType&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;kysely&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">type&lt;/span> &lt;span class="nx">Generated&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">ColumnType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">infer&lt;/span> &lt;span class="na">S&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">infer&lt;/span> &lt;span class="na">I&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">infer&lt;/span> &lt;span class="na">U&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">?&lt;/span> &lt;span class="nx">ColumnType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">S&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">I&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">U&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="nx">ColumnType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">T&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="na">T&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">type&lt;/span> &lt;span class="nx">PlayerRole&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;allrounder&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;batter&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;bowler&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;keeper&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">interface&lt;/span> &lt;span class="nx">AppUser&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">interface&lt;/span> &lt;span class="nx">League&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">description&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">Generated&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">owner_id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">interface&lt;/span> &lt;span class="nx">Player&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">Generated&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">image_url&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league_id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">role&lt;/span>: &lt;span class="kt">PlayerRole&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">interface&lt;/span> &lt;span class="nx">DB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app_user&lt;/span>: &lt;span class="kt">AppUser&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league&lt;/span>: &lt;span class="kt">League&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>: &lt;span class="kt">Player&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="kysely">kysely
&lt;/h3>&lt;p>I can&amp;rsquo;t stress just how impressed I am with &lt;a class="link" href="https://kysely.dev/" target="_blank" rel="noopener"
>Kysely&lt;/a> despite not having worked with it for long. It really does a fantastic job of not trying to do too much — it just gets out of the way and makes it feel quick and easy to work with.&lt;/p>
&lt;p>Setting up the database client using Kysely was very straightforward.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">db.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">pg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pool&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">connectionString&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">dialect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PostgresDialect&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">pool&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Kysely&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">DB&lt;/span>&lt;span class="p">&amp;gt;({&lt;/span> &lt;span class="nx">dialect&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I decided to break the tables down into repositories for ease of access, and here we can see how simple queries look using Kysely. We get full type-safety along with auto-complete while writing the entire query, and I found that the query itself mapped nicely to what I&amp;rsquo;d expect the generated SQL to look like.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">players.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">PlayerRepository&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RepositoryBase&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">public&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>: &lt;span class="kt">Insertable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Player&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">insertInto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;player&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">returning&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">executeTakeFirstOrThrow&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">public&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">values&lt;/span>: &lt;span class="kt">Updateable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Player&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">updateTable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;player&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="kr">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">values&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">public&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deleteFrom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;player&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">where&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">execute&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kysely provides us with &lt;code>Selectable&amp;lt;T&amp;gt;&lt;/code>, &lt;code>Insertable&amp;lt;T&amp;gt;&lt;/code> and &lt;code>Updateable&amp;lt;T&amp;gt;&lt;/code> wrappers for each table, which should give us the correct types for each respective operation.&lt;/p>
&lt;p>Additionally, you can replace &lt;code>execute()&lt;/code> with &lt;code>compile()&lt;/code> or &lt;code>explain()&lt;/code> to get an idea of what&amp;rsquo;s being generated under the hood. See the following for a truncated example based on running &lt;code>compile()&lt;/code> against the &lt;code>create(...)&lt;/code> command above.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">query:&lt;/span> &lt;span class="err">{&lt;/span> &lt;span class="err">...&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">sql:&lt;/span> &lt;span class="err">&amp;#39;insert&lt;/span> &lt;span class="err">into&lt;/span> &lt;span class="s2">&amp;#34;player&amp;#34;&lt;/span> &lt;span class="err">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="s2">&amp;#34;image_url&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="s2">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="s2">&amp;#34;league_id&amp;#34;&lt;/span>&lt;span class="err">)&lt;/span> &lt;span class="err">values&lt;/span> &lt;span class="err">($&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">)&lt;/span> &lt;span class="err">returning&lt;/span> &lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="err">&amp;#39;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">parameters:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;#39;Isaac&lt;/span> &lt;span class="err">Dedini&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;#39;&amp;lt;image_url&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;#39;bowler&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;#39;&amp;lt;uuid&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="going-even-further">Going even further
&lt;/h2>&lt;p>I was pretty happy with what I had landed on here, but I started wondering if we might be able to also extract some additional metadata and generate validation schema based on some of the database properties — namely wherever we&amp;rsquo;ve used &lt;code>varchar(n)&lt;/code>.&lt;/p>
&lt;p>Yeah, as you can probably tell I&amp;rsquo;ve run into a few cases where our application&amp;rsquo;s validation hasn&amp;rsquo;t been updated to reflect a change in the database schema. I wanted to try and fix that.&lt;/p>
&lt;p>I started out here looking around at various options, including replacing &lt;code>kysely-codegen&lt;/code> with &lt;a class="link" href="https://github.com/kristiandupont/kanel/tree/main/packages/kanel-kysely" target="_blank" rel="noopener"
>kanel-kysely&lt;/a> just so I could leverage &lt;a class="link" href="https://www.npmjs.com/package/kanel-zod" target="_blank" rel="noopener"
>kanel-zod&lt;/a> for this purpose. I was left underwhelmed at what was actually generated, and decided to go back to the drawing board.&lt;/p>
&lt;h3 id="generating-zod-validation-schema-with-kysely-codegen">Generating Zod validation schema with kysely-codegen
&lt;/h3>&lt;p>The &lt;a class="link" href="https://github.com/RobinBlomberg/kysely-codegen/releases/tag/0.18.0" target="_blank" rel="noopener"
>0.18.0 release&lt;/a> of &lt;code>kysely-codegen&lt;/code> introduced the ability to define custom serializers, largely related to this &lt;a class="link" href="https://github.com/RobinBlomberg/kysely-codegen/issues/86" target="_blank" rel="noopener"
>GitHub discussion&lt;/a>. This gave me &lt;em>most&lt;/em> of what I was after once I&amp;rsquo;d extended the example provided in the linked release notes to include more extensive mappings.&lt;/p>
&lt;p>Something that appeared to be missing yet as one of the key reasons I wanted to look into database-driven Zod schema was the ability to extract maximum character lengths for &lt;code>varchar&lt;/code> columns. Of course, &lt;a class="link" href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_varchar.28n.29_by_default" target="_blank" rel="noopener"
>there is advice floating&lt;/a> around that suggests preferring &lt;code>text&lt;/code> instead of &lt;code>varchar&lt;/code>, but it&amp;rsquo;s a habit I can&amp;rsquo;t shake.&lt;/p>
&lt;p>I also wanted to refrain from mapping check constraints — I needed to draw a line here and stopping short of check constraints felt like a good balance between simplicity and functionality. So, consider that to be a caveat of this approach, although nothing is stopping you from extending the serializer to account for check constraints either.&lt;/p>
&lt;h4 id="scripts">Scripts
&lt;/h4>&lt;p>I eventually settled on adding the following script to allow me to grab additional metadata from the database, essentially returning a mapping between column names and their &lt;code>character_maximum_length&lt;/code> property.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">get-column-metadata.js&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">pg&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;pg&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">pg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">connectionString&lt;/span>: &lt;span class="kt">process.env.DATABASE_URL&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">connect&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> SELECT column_name, character_maximum_length
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> FROM information_schema.columns
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> WHERE table_name = $1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">table&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rows&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="configuration">Configuration
&lt;/h4>&lt;p>I&amp;rsquo;ve truncated the &lt;code>mapDataTypeToZodString(...)&lt;/code> function below for brevity, but it retains all the mappings required for the tables defined so far.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">.kysely-zod-codegenrc.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="s2">&amp;#34;dotenv/config&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">toKyselyCamelCase&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;kysely-codegen&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">join&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">execSync&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;child_process&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>: &lt;span class="kt">process.env.DATABASE_URL&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">outFile&lt;/span>: &lt;span class="kt">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cwd&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s2">&amp;#34;src&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;lib&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;generated&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;db-schema-zod.ts&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">excludePattern&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;graphile_migrate.*&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serializer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serializeFile&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;import { z } from &amp;#34;zod&amp;#34;;\n\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">table&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tables&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;export const &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">toKyselyCamelCase&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;Schema = z.object({\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">additionalColumnMetadata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getAdditionalColumnMetadata&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">column&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">columns&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">mapDataTypeToZodString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">enumValues&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">!&lt;/span>&lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isNullable&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataType&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataType&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;character varying&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dataType&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;varchar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;.min(1)&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">maxLength&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">additionalColumnMetadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">column_name&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">character_maximum_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">maxLength&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="sb">`.max(&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">maxLength&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">)`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">column&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isNullable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;.optional()&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;,\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;});\n\n&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getAdditionalColumnMetadata&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tableName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">execSync&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`node scripts/get-column-metadata.js &amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">tableName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#34;`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">encoding&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">mapDataTypeToZodString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dataType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumValues&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">dataType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;integer&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;z.number()&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;varchar&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;z.string()&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;z.string().uuid()&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">enumValues&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">enumValues&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">?&lt;/span> &lt;span class="sb">`z.enum([&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">enumValues&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="sb">`&amp;#39;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">&amp;#39;`&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">])`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;z.unknown()&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="output">Output
&lt;/h4>&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">db-schema-zod.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;zod&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">appUserSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">appUserLeagueSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">leagueSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">description&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">owner_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">memberSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">role&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">playerSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">role&lt;/span>: &lt;span class="kt">z.enum&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;allrounder&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;batter&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;bowler&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;keeper&amp;#34;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">image_url&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">optional&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">roundSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kt">object&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">league_id&lt;/span>: &lt;span class="kt">z.string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">uuid&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="usage">Usage
&lt;/h4>&lt;p>Now that we have our Zod validation schemas, we can use them for form validation. In the case of a create player form we only ask the user to supply three of the properties, so we just restrict the schema accordingly.&lt;/p>
&lt;p>Once that&amp;rsquo;s done we can extend the schema to &lt;em>add&lt;/em> rules to an individual property. This allows us to layer business rules on top of our database-driven validation.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">db-schema-zod.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">playerSchema&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;$lib/generated/db-schema-zod&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;zod&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">formSchema&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">playerSchema&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">pick&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">image_url&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">role&lt;/span>: &lt;span class="kt">true&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">extend&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">image_url&lt;/span>: &lt;span class="kt">playerSchema.shape.image_url.unwrap&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">or&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">literal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this case, changing &lt;code>player.image_url&lt;/code> from &lt;code>varchar(2048)&lt;/code> to &lt;code>varchar(20)&lt;/code> would cause the form&amp;rsquo;s validation to instantly reflect that change without needing us to go and modify a separate schema.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>After digging through a swathe of options when it comes to managing persistence in a full-stack meta-framework, eventually stumbling upon the above felt like a revelation.&lt;/p>
&lt;p>While no doubt there will be hitches along the way, this presents a way to move forward quickly and iteratively with data changes, allowing them to propagate throughout your codebase via the generated types.&lt;/p>
&lt;p>Essentially, this boils down to a very straightforward workflow — add a migration, let it spin for a second or two, and start using the generated types.&lt;/p></description></item><item><title>Comparing hybrid app frameworks</title><link>https://vivecuervo7.github.io/dev-blog/p/hybrid-app-dev/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +1000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/hybrid-app-dev/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/hybrid-app-dev/cover.jpg" alt="Featured image of post Comparing hybrid app frameworks" />&lt;p>I have at times felt myself wondering what the landscape of hybrid app development looks like, and after a less-than-positive experience using Ionic in the past I wanted to give myself some time to truly explore the options I had at my disposal.&lt;/p>
&lt;p>The idea of this will be to write a very basic implementation of a Todo app for each of the following frameworks, providing brief findings around setup and the inner dev loop. None of the frameworks yielded a complete Todo app and this had little bearing on the findings, but it did provide a common ground to anchor any findings to.&lt;/p>
&lt;p>Nothing too fancy, I&amp;rsquo;ve taken a &amp;ldquo;day in the life of&amp;rdquo; approach here to constrain things to a very tight timebox and taken a few notes about the experiences as I went.&lt;/p>
&lt;div class="alert">There&amp;rsquo;s a bit of a brain dump following this. Jump to the &lt;a class="link" href="#conclusion" >conclusion&lt;/a> if you&amp;rsquo;re mostly interested in the overall findings.&lt;/div>
&lt;h2 id="react-native--expo">React Native + Expo
&lt;/h2>&lt;h3 id="general-observations">General observations
&lt;/h3>&lt;ul>
&lt;li>Using Expo with React Native is strongly suggested by the community based on some initial searches&lt;/li>
&lt;li>Looks like while Expo portrays itself as a paid service, doing local builds (&lt;code>eas build --platform ios --local&lt;/code>) doesn&amp;rsquo;t require their paid services&lt;/li>
&lt;li>Unsure in starting out between Expo Go and Development Build — opted for the latter, seems to be their recommendation for production workloads&lt;/li>
&lt;li>Need to sign up for a (free) Expo account if using Expo Application Services, but looks like this is unnecessary if using &lt;code>npx expo run:ios&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="pros">Pros
&lt;/h4>&lt;ul>
&lt;li>Project structure unsurprisingly looks familiar coming from a React (web) background&lt;/li>
&lt;li>Fast Refresh (i.e. hot reloading) works well&lt;/li>
&lt;li>Has a &lt;code>npx @react-native-community/cli doctor&lt;/code> similar to Flutter which helps to diagnose any development environment issues&lt;/li>
&lt;li>&lt;a class="link" href="https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions" target="_blank" rel="noopener"
>Platform-specific extensions&lt;/a> make it look far easier to implement any platform-specific code with a consolidated import&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.expo.dev/eas-update/introduction/" target="_blank" rel="noopener"
>EAS Updates&lt;/a> looks incredibly useful however comes with a hefty price tag — this looks like it can be circumvented by setting up a custom updates server&lt;/li>
&lt;/ul>
&lt;h4 id="cons">Cons
&lt;/h4>&lt;ul>
&lt;li>While documentation suggests that components can automatically switch between iOS and Android depending on the platform, the shipped components are very basic (a list view looked completely unstyled) and likely require a third-party UI library&lt;/li>
&lt;li>Web support seems to only be supported via a third party library, but this appears to be configured as the default when using Expo&lt;/li>
&lt;/ul>
&lt;h3 id="platform-specific-observations">Platform-specific observations
&lt;/h3>&lt;h4 id="android">Android
&lt;/h4>&lt;ul>
&lt;li>Environment setup is a little more involved than Flutter, requiring installing JDK and manually setting &lt;code>ANDROID_HOME&lt;/code> and &lt;code>JAVA_HOME&lt;/code>&lt;/li>
&lt;li>Straightforward to run on both emulator or real device&lt;/li>
&lt;li>Didn&amp;rsquo;t attempt to fix, but running a build using &lt;code>eas build --platform android --local&lt;/code> failed&lt;/li>
&lt;/ul>
&lt;h4 id="ios">iOS
&lt;/h4>&lt;ul>
&lt;li>Straightforward to get running in an emulator&lt;/li>
&lt;li>Similar to Flutter etc., running on a connected device requires a paid developer account&lt;/li>
&lt;li>Adding a list view for the todos didn&amp;rsquo;t come with any styling even remotely resembling the native iOS components&lt;/li>
&lt;li>Running &lt;code>eas build --platform ios --local&lt;/code> indicated that an active Apple account would be required to complete&lt;/li>
&lt;/ul>
&lt;h4 id="web">Web
&lt;/h4>&lt;ul>
&lt;li>Seems that similar to Flutter web is a second-class citizen in React Native, however Expo specifically appears to use the third-party &lt;a class="link" href="https://necolas.github.io/react-native-web/" target="_blank" rel="noopener"
>&lt;code>react-native-web&lt;/code>&lt;/a> library and provides the means to build and serve a web app&lt;/li>
&lt;/ul>
&lt;h3 id="summary">Summary
&lt;/h3>&lt;p>The lower learning curve coming from a React background making this option hard to ignore.&lt;/p>
&lt;p>Expo feels like a really nice wrapper around development, even without the paid options. It looks like using it also addresses the apparent issue around web not seemingly being supported without manually setting up a third-party library.&lt;/p>
&lt;p>The apparent lack of styled components and push towards community-driven UI libraries etc. (even a basic checkbox component was marked as deprecated with a link to community alternatives) gives pause when considering React Native as a target for Android and iOS. Flutter seemed stronger in this regard, however the platform-specific extensions look like a &lt;em>much&lt;/em> cleaner way to go about writing platform-specific code.&lt;/p>
&lt;p>While not mentioned above I did stumble across &lt;code>Solito&lt;/code> as a library attempting to address some apparent differences in the way navigation needs to be implemented for web vs. native. I didn&amp;rsquo;t get into any navigation to understand this for myself, but it did make me wonder as to the potential obstacles here.&lt;/p>
&lt;h2 id="flutter">Flutter
&lt;/h2>&lt;h3 id="general-observations-1">General observations
&lt;/h3>&lt;ul>
&lt;li>Syntax feels more closely reminiscent of Swift UI than other web frameworks i.e. React&lt;/li>
&lt;li>Requires conditionally switching between iOS / Android / web widgets manually&lt;/li>
&lt;li>Android and iOS development seem solid, web however had some issues I was unable to resolve in a reasonable timeframe&lt;/li>
&lt;li>Ships with components, or &amp;lsquo;widgets&amp;rsquo;, implementing &lt;a class="link" href="https://docs.flutter.dev/ui/widgets#design-systems" target="_blank" rel="noopener"
>both Apple&amp;rsquo;s Human Interface Guidelines and Material Design&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="pros-1">Pros
&lt;/h4>&lt;ul>
&lt;li>Quick to get up and running&lt;/li>
&lt;li>Useful VS Code extension&lt;/li>
&lt;li>Hot reloading works really nicely, maintains state through app changes&lt;/li>
&lt;li>Dart DevTools look like they could be incredibly helpful&lt;/li>
&lt;li>&lt;code>flutter doctor&lt;/code> command quite useful for getting development environment set up&lt;/li>
&lt;li>Similarly, &lt;code>flutter devices&lt;/code> and &lt;code>flutter emulators&lt;/code> are handy - CLI tooling is quite solid overall&lt;/li>
&lt;li>Building app files is straightforward with &lt;code>flutter build &amp;lt;target&amp;gt;&lt;/code> with &lt;code>apk&lt;/code>, &lt;code>ios&lt;/code>, &lt;code>macos&lt;/code>, &lt;code>web&lt;/code> etc.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-1">Cons
&lt;/h4>&lt;ul>
&lt;li>Requires learning a new language (Dart)&lt;/li>
&lt;li>Widgets aligned to platforms (Material UI vs. iOS) need to manually be implemented conditionally or rely on third-party packages for auto-switching between them&lt;/li>
&lt;li>Issues running app in debug mode for web (see &lt;a class="link" href="#web-1" >Web&lt;/a> section)&lt;/li>
&lt;/ul>
&lt;h3 id="platform-specific-observations-1">Platform-specific observations
&lt;/h3>&lt;h4 id="android-1">Android
&lt;/h4>&lt;ul>
&lt;li>Running against an emulator is pretty straightforward once Android Studio is set up&lt;/li>
&lt;li>Similarly, very easy to run against a real device once connected&lt;/li>
&lt;li>VS Code integration seemed less useful here, with no way to select the target device / emulator&lt;/li>
&lt;li>Material Design is the default, which makes it unsurprisingly very aligned to Android development&lt;/li>
&lt;/ul>
&lt;h4 id="ios-1">iOS
&lt;/h4>&lt;ul>
&lt;li>VS Code extension facilitates choosing from &lt;code>Simulator&lt;/code>, &lt;code>Mac Designed for iPad&lt;/code>, or &lt;code>macOS&lt;/code> as the target device&lt;/li>
&lt;li>Some permissions need to be enabled manually e.g. HTTP calls fail until adding the appropriate entitlement&lt;/li>
&lt;li>Appears that a paid developer account is required to develop locally against a real device, however actually connecting to seems relatively straightforward&lt;/li>
&lt;li>Without going too deep, the available &lt;a class="link" href="https://docs.flutter.dev/ui/widgets/cupertino" target="_blank" rel="noopener"
>Cupertino widgets&lt;/a> look like they provide a solid ecosystem for developing complete apps aligned to the Human Interface Guidelines&lt;/li>
&lt;/ul>
&lt;h4 id="web-1">Web
&lt;/h4>&lt;ul>
&lt;li>Checking for &lt;code>Platform.IsIOS&lt;/code> etc. breaks on web, and requires ensuring that those checks are only run &lt;em>after&lt;/em> checking that we&amp;rsquo;re not in a web browser&lt;/li>
&lt;li>Hot reloading doesn&amp;rsquo;t work here, only hot &lt;em>restarting&lt;/em>&lt;/li>
&lt;li>VS Code not showing web / browser as a target, could be due to using a non-standard browser; needed to launch via CLI or manually created launch configuration for VS Code&lt;/li>
&lt;li>Ultimately, I had this time-boxed and was unable to actually get the web view to load — perhaps this is due to using a niche browser (Arc, which &lt;em>is&lt;/em> however Chromium-based) — in either case this seems to be a widely reported issue with no concrete solution&lt;/li>
&lt;/ul>
&lt;h3 id="summary-1">Summary
&lt;/h3>&lt;p>Ultimately Flutter looks like a very promising option if we&amp;rsquo;re targeting only Android and iOS. Once any issues are resolved for web, that likely becomes a valid target, however web as a target felt like a second-class citizen.&lt;/p>
&lt;p>The Cupertino widgets make Flutter appear quite capable of producing a rich, native-like application, despite needing to more often than not implement separate Android and iOS widgets. Material Design as the other widget ecosystem provided by default produces a native-like Android experience.&lt;/p>
&lt;p>The learning curve would be quite high owing to the need to learn a new language in Dart, especially when it comes to navigation and state management.&lt;/p>
&lt;h2 id="capacitor--ionic">Capacitor / Ionic
&lt;/h2>&lt;h3 id="general-observations-2">General observations
&lt;/h3>&lt;ul>
&lt;li>Came as a bit of a surprise upon spinning up a new project — Ionic still uses &lt;code>react-scripts&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="pros-2">Pros
&lt;/h4>&lt;ul>
&lt;li>Syntax is &lt;em>very&lt;/em> close to what a typical React web project looks like - very little learning curve and familiar workflows&lt;/li>
&lt;li>Shipped Ionic components implement both iOS and Material Design styles that automatically switch based on the platform&lt;/li>
&lt;/ul>
&lt;h4 id="cons-2">Cons
&lt;/h4>&lt;ul>
&lt;li>General consensus based on some articles / conversation is that performance is not very good, especially compared to e.g. Flutter&lt;/li>
&lt;li>Community sentiment seems to be quite poor, often recommending Flutter and React Native as much better alternatives&lt;/li>
&lt;li>Documentation is a little lacking when setting up for running on other devices — requires &lt;code>@capacitor/core&lt;/code> and &lt;code>@capacitor/cli&lt;/code>, run &lt;code>npx cap init&lt;/code> before we can add iOS / Android with &lt;code>npx cap add iOS&lt;/code> etc.&lt;/li>
&lt;/ul>
&lt;h3 id="platform-specific-observations-2">Platform-specific observations
&lt;/h3>&lt;h4 id="android-2">Android
&lt;/h4>&lt;ul>
&lt;li>Running against emulator seems to work as expected, but as with iOS was unable to get live reloading working here&lt;/li>
&lt;li>Running against a real device seemed to be on par with the emulator experience for Android&lt;/li>
&lt;/ul>
&lt;h4 id="ios-2">iOS
&lt;/h4>&lt;ul>
&lt;li>Initial build worked fine, subsequent builds yielded a blank screen and no useful logs were not easy to find, assuming they exist&lt;/li>
&lt;li>Attemps to run on a real device yielded an error &amp;ldquo;Device is busy&amp;rdquo;&lt;/li>
&lt;li>While documentation suggests it is possible, could not get live reloading working when the builds did work&lt;/li>
&lt;/ul>
&lt;h4 id="web-2">Web
&lt;/h4>&lt;ul>
&lt;li>Compared to Flutter and React Native, web feels like a first-class citizen under Ionic&lt;/li>
&lt;li>Hot reloading works well for web&lt;/li>
&lt;/ul>
&lt;h3 id="summary-2">Summary
&lt;/h3>&lt;p>Ionic feels like it has a nice happy path, but once anything goes slightly astray it starts to feel quite shaky. I would have dismissed this as the byproduct of trying to squeeze a brief intro into a single day, but this is consistent with my experience using it a couple of years prior.&lt;/p>
&lt;p>The component rendering is quite nice and it&amp;rsquo;s very handy just needing to render a single component and have it displayed relatively correctly per the target platform, but again this relies on that happy path. Going back to my previous experience and any custom styling etc. can be quite difficult.&lt;/p>
&lt;p>Ultimately Ionic felt a fair way off the more polished experiences of Flutter and React Native. It likely has a place for a quick prototype where the majority of active development can be done in the web browser and device or emulator builds are used more sparingly. There may be another half-point here when it comes to web development specifically, but I would be more inclined to use one of the other offerings.&lt;/p>
&lt;h2 id="net-maui">.NET MAUI
&lt;/h2>&lt;h3 id="general-observations-3">General observations
&lt;/h3>&lt;ul>
&lt;li>Little confusing to start re: ability to also cover targeting web — ultimately scrapped the default MAUI project in lieu of the &lt;code>.NET MAUI Blazor Hybrid and Web App&lt;/code> template&lt;/li>
&lt;/ul>
&lt;h4 id="pros-3">Pros
&lt;/h4>&lt;ul>
&lt;li>Similar to Blazor, being able to maintain this under a single solution makes sharing data contracts etc. much more straightforward&lt;/li>
&lt;li>Looks like it&amp;rsquo;s essentially Blazor from here on out, which with some experience makes me feel confident of a reasonable framework for development&lt;/li>
&lt;li>Being unable to run on iOS or Android I was unable to confirm, but the MAUI controls such as the &lt;a class="link" href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.maui.controls.listview?view=net-maui-9.0" target="_blank" rel="noopener"
>&lt;code>ListView&lt;/code>&lt;/a> did not appear to implement any platofrm-specific styling or functionality, appearing that this would require manual work or third-party implementations&lt;/li>
&lt;/ul>
&lt;h4 id="cons-3">Cons
&lt;/h4>&lt;ul>
&lt;li>Trouble debugging via VS Code, needed to revert to running via CLI&lt;/li>
&lt;li>Running via CLI not working out of the box for iOS or Android (&lt;code>dotnet build&lt;/code> works for all three targets)&lt;/li>
&lt;li>VS Code on macOS troubles seem to be common — seems that Rider is likely a better option&lt;/li>
&lt;/ul>
&lt;h3 id="platform-specific-observations-3">Platform-specific observations
&lt;/h3>&lt;h4 id="android-3">Android
&lt;/h4>&lt;ul>
&lt;li>Unable to run via VS Code or CLI&lt;/li>
&lt;li>From my understanding, using the template required to support web means that the app will essentially be the web app rendered inside a web view — unsure of implications on performance or platform interactivity etc.&lt;/li>
&lt;/ul>
&lt;h4 id="ios-3">iOS
&lt;/h4>&lt;ul>
&lt;li>Unable to run via VS Code or CLI&lt;/li>
&lt;li>From my understanding, using the template required to support web means that the app will essentially be the web app rendered inside a web view — unsure of implications on performance or platform interactivity etc.&lt;/li>
&lt;/ul>
&lt;h4 id="web-3">Web
&lt;/h4>&lt;ul>
&lt;li>Little confusing to start, needing to re-create project with &lt;code>.NET MAUI Blazor Hybrid and Web App&lt;/code> template&lt;/li>
&lt;li>Started up as expected&lt;/li>
&lt;li>Hot reload worked initially, but stopped after the first update and subsequent changes did not trigger any reload&lt;/li>
&lt;/ul>
&lt;h3 id="summary-3">Summary
&lt;/h3>&lt;p>MAUI came with the most troublesome setup, to the point that I was unable to get it running on iOS or Android emulated devices within a timebox. While this may have been environment-specific, I didn&amp;rsquo;t want to consider using a specific IDE as a valid solution.&lt;/p>
&lt;p>The apparent lack of out-of-the-box support for platform-specific styling also painted a less than ideal picture.&lt;/p>
&lt;p>There was also some confusion over how the framework was intended to be used, with a new project based on the &lt;code>.NET MAUI&lt;/code> template looking very different to the &lt;code>.NET MAUI Blazor Hybrid App and Web App&lt;/code> template.&lt;/p>
&lt;p>It didn&amp;rsquo;t take long for me to begin feeling that this wasn&amp;rsquo;t a framework I wanted to work with, despite some attraction to the idea of being able to use Blazor or a Blazor-like syntax, having used it in the past.&lt;/p>
&lt;h2 id="conclusion">Conclusion
&lt;/h2>&lt;p>The following is very much based around my specific environment and some aggressive timeboxes, and is reflective of my background in using predominantly React for front-end development.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Framework&lt;/th>
&lt;th>Would use?&lt;/th>
&lt;th>Setup / getting started&lt;/th>
&lt;th>Tooling&lt;/th>
&lt;th>Learning curve&lt;/th>
&lt;th>OOTB components*&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>React Native&lt;/td>
&lt;td>👍&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>⭐⭐⭐&lt;/td>
&lt;td>📕&lt;/td>
&lt;td>❌&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flutter&lt;/td>
&lt;td>👍&lt;/td>
&lt;td>⭐⭐⭐&lt;/td>
&lt;td>⭐⭐⭐&lt;/td>
&lt;td>📕 📕 📕&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ionic&lt;/td>
&lt;td>➖&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>⭐&lt;/td>
&lt;td>📕&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.NET MAUI&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>⭐&lt;/td>
&lt;td>⭐&lt;/td>
&lt;td>📕 📕&lt;/td>
&lt;td>❌&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert">* Specifically, out-of-the-box &lt;strong>&lt;em>platform-specific&lt;/em>&lt;/strong> components&lt;/div>
&lt;p>Ultimately I would not, based on this experience, want to move forward with .NET MAUI for any of the targets.&lt;/p>
&lt;p>Ionic felt a little better but this experience did little outside of reaffirming my sentiment in not wanting to use this again. I do believe however that due to the relatively pleasant happy path it provides, it may still have a place for rapidly building a simple prototype with the out-of-the-box platform-specific components. I would not pick this over Flutter or React Native for a more serious project.&lt;/p>
&lt;p>React Native and Flutter felt quite even, but the deciding factors for me would be &lt;strong>time constraints&lt;/strong>, specifically regarding the learning curve, and &lt;strong>target platforms&lt;/strong>, looking whether we intend to target web.&lt;/p>
&lt;p>For strictly iOS and Android development, it&amp;rsquo;s hard to look past the out-of-the-box components that Flutter ships with. While they need to be implemented conditionally, I feel that this workflow would still be preferred to leaning on third-party components or requiring manual implementations as React Native would require.&lt;/p>
&lt;p>If web was intended as a priority target alongside the two main mobile platforms, I feel that React Native creeps ahead here. There is a small caveat in the as-of-yet unexplored navigation, where the existence of the &lt;code>Solito&lt;/code> library suggests some pain around navigation where web and native platforms are being used. This may be either addressed in recent versions, or by third-party libraries e.g. &lt;code>Solito&lt;/code>.&lt;/p>
&lt;p>I did walk away from this experience feeling that Flutter had more upside to it, but given the above considerations I would need to factor in the learning curve against the shipped platform-specific components. If pressed, I would feel compelled to choose React Native should I be starting a project today, but Flutter looks to be a very promising avenue for professional development and future usage.&lt;/p></description></item><item><title>Creating a React component library with Vite</title><link>https://vivecuervo7.github.io/dev-blog/p/react-component-library-with-vite/</link><pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/react-component-library-with-vite/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/react-component-library-with-vite/cover.jpg" alt="Featured image of post Creating a React component library with Vite" />&lt;p>A brief discussion with a client recently reminded me of something I&amp;rsquo;d long wanted to look into. The conversation was around the consolidation of designs across their rather broad suite of applications, and given the frequency with which React was used it got me wondering if it might be worth looking into creating a reusable component library.&lt;/p>
&lt;p>Plenty of resources popped up when I started looking into the topic, and ultimately I discovered two promising avenues:&lt;/p>
&lt;ul>
&lt;li>Rollup&lt;/li>
&lt;li>Vite (or more specifically, Vite&amp;rsquo;s &lt;a class="link" href="https://vite.dev/guide/build.html#library-mode" target="_blank" rel="noopener"
>Library Mode&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>Of the above options, Rollup seemed to be the more &amp;ldquo;traditional&amp;rdquo; approach and so that&amp;rsquo;s where I started.&lt;/p>
&lt;h2 id="rollup">Rollup
&lt;/h2>&lt;p>&lt;a class="link" href="https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe" target="_blank" rel="noopener"
>This post&lt;/a> by &lt;a class="link" href="https://dev.to/alexeagleson" target="_blank" rel="noopener"
>Alex Eagleson&lt;/a> was instrumental in helping me get my head around what needed to be done. There&amp;rsquo;s also a fantastic accompanying video tutorial linked on his post.&lt;/p>
&lt;p>The tutorial is a little outdated so not all of the steps work as described, however there is a good amount of discussion in the comments with updated instructions. In any case, it proved to be informative enough to get me started in building a component library.&lt;/p>
&lt;p>Hopefully it saves any pain, but one thing that caught me was a change to &lt;code>@rollup/plugin-typescript&lt;/code> in version 12 which was causing errors, especially when trying to create multiple outputs. Rolling back to version 11 restored the original functionality and allowed me to progress with the tutorial.&lt;/p>
&lt;p>This resource was incredibly helpful in introducing me to the core concepts of how to bundle and publish a component library, and I highly recommend reading through it for anyone unfamiliar with Rollup and how to use it in this context.&lt;/p>
&lt;h2 id="vite">Vite
&lt;/h2>&lt;p>After running through the tutorial above and using the resulting library&amp;rsquo;s simple button component in another React application, I decided to look at Vite before continuing.&lt;/p>
&lt;p>Of the resources I used, &lt;a class="link" href="https://victorlillo.dev/blog/react-typescript-vite-component-library" target="_blank" rel="noopener"
>this post&lt;/a> by &lt;a class="link" href="https://victorlillo.dev/" target="_blank" rel="noopener"
>Víctor Lillo&lt;/a> proved to be the most complete as it covered all of the aspects I wanted to look at.&lt;/p>
&lt;p>Initially I disliked this approach due to the need to create a full-blown React application and subsequently remove all the bits we didn&amp;rsquo;t need, however it was still &lt;em>relatively&lt;/em> painless and came with a few nice things working straight out of the box — CSS as an example.&lt;/p>
&lt;h3 id="exporting-components">Exporting components
&lt;/h3>&lt;p>I did prefer the way components were exported in the first tutorial I followed, so I stuck with that here. This approach used an explicit &lt;code>index.ts&lt;/code> file at each level of the hierarchy.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">src/components/Button/index.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;./Button&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">src/components/index.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">Button&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;./Button&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">src/index.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;./components&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="library-mode">Library mode
&lt;/h3>&lt;p>The initial config required on the Vite side was relatively straightforward. Setting the required values for &lt;code>build.lib&lt;/code> under &lt;code>vite.config.ts&lt;/code> is all we needed, where we set our entry point.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">/// &amp;lt;reference types=&amp;#34;vite/client&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">resolve&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;node:path&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">defineConfig&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;vite&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">react&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@vitejs/plugin-react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">defineConfig&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">react&lt;/span>&lt;span class="p">()],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lib&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">entry&lt;/span>: &lt;span class="kt">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;src/index.ts&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">formats&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;es&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="dependencies">Dependencies
&lt;/h4>&lt;p>Another important piece of configuration here is to make sure we&amp;rsquo;re not bundling up a bunch of dependencies that we don&amp;rsquo;t need, such as React itself. We do this by extending &lt;code>vite.config.ts&lt;/code> to include &lt;code>build.rollupOptions&lt;/code> under both &lt;code>external&lt;/code> and &lt;code>output.globals&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">defineConfig&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">plugins&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//...,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">build&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lib&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//...,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">rollupOptions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">external&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;react-dom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;react/jsx-runtime&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">globals&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">react&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;React&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;react-dom&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;React-dom&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;react/jsx-runtime&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;react/jsx-runtime&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In my particular case, I was using &lt;code>classnames&lt;/code> as a dependency for some styling, and ran into a few options when it came to ensuring any consumers of the library would have all the required dependencies.&lt;/p>
&lt;p>&lt;strong>Bundled with the application&lt;/strong>&lt;/p>
&lt;p>Leaving &lt;code>classnames&lt;/code> under &lt;code>devDependencies&lt;/code> in &lt;code>package.json&lt;/code> and simply having referenced it in the bundled code meant that &lt;code>classnames&lt;/code> itself would also be bundled into the library itself. While there may be some cases where this makes sense, if the consuming application was using &lt;code>classnames&lt;/code> already then we&amp;rsquo;ve essentially forced them to bundle the code in their application twice.&lt;/p>
&lt;p>&lt;strong>Making it a regular dependency&lt;/strong>&lt;/p>
&lt;p>Moving &lt;code>classnames&lt;/code> into the &lt;code>dependencies&lt;/code> list in &lt;code>package.json&lt;/code> might work, but that would lead to the consuming application needing to unnecessarily include &lt;code>classnames&lt;/code> as a runtime dependency.&lt;/p>
&lt;p>&lt;strong>Peer dependencies&lt;/strong>&lt;/p>
&lt;p>Having not seen this prior to the covered tutorials, it took some reasoning to understand what this was used for. Essentially, moving &lt;code>classnames&lt;/code> into the &lt;code>peerDependencies&lt;/code> would mean that it was a requirement of the library that the consuming application must have a matching version of the package installed. Thus, some leniency was required when specifying the version.&lt;/p>
&lt;p>Installation was a concern that crossed my mind, however as of npm 7 &lt;a class="link" href="https://github.blog/news-insights/product-news/npm-7-is-now-generally-available/#peer-dependencies" target="_blank" rel="noopener"
>peer dependencies are installed by default&lt;/a>, meaning that a consumer need not go and manually install the peer dependencies themselves.&lt;/p>
&lt;p>Ultimately I went with the &lt;strong>peer dependencies&lt;/strong> approach as it seemed to have the fewest drawbacks.&lt;/p>
&lt;h4 id="entry-points-and-css">Entry points and CSS
&lt;/h4>&lt;p>As mentioned in the tutorial, style sheets aren&amp;rsquo;t automatically imported in the generated code and thus the consumer needs to import it themselves manually. This can be resolved by using the &lt;a class="link" href="https://www.npmjs.com/package/vite-plugin-lib-inject-css" target="_blank" rel="noopener"
>vite-plugin-lib-inject-css&lt;/a> plugin. Once installed, it needs to be added to &lt;code>vite.config.ts&lt;/code> under &lt;code>plugins&lt;/code>.&lt;/p>
&lt;p>This fixes our issue, however we now have a single import statement in our generated &lt;code>index.js&lt;/code> file, meaning the entire style sheet needs to be imported if we use even a single component from our library. &lt;a class="link" href="https://rollupjs.org/configuration-options/#input" target="_blank" rel="noopener"
>Rollup recommends&lt;/a> that we instead turn every file into an entry point, which will result in individual CSS files for each component — allowing us to import and use a single component, and only require that component&amp;rsquo;s style sheet.&lt;/p>
&lt;p>Adding the following to &lt;code>build.rollupOptions&lt;/code> allows us to generate individual files for each component. The addition to &lt;code>build.rollupOptions.output&lt;/code> is also necessary to retain our folder structure in the generated code.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">export default defineConfig({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rollupOptions: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ input: Object.fromEntries(
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ glob
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .sync(&amp;#39;src/**/*.{ts,tsx}&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .map((file: string) =&amp;gt; [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ path.relative(&amp;#39;src&amp;#39;, file.slice(0, file.length - path.extname(file).length)),
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ fileURLToPath(new URL(file, import.meta.url))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ ])
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ ),
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> output: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ entryFileNames: &amp;#39;[name].js&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ assetFileNames: &amp;#39;assets/[name][extname]&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will result in the &lt;code>dist/assets/&lt;/code> folder containing a CSS file for each component, which are imported accordingly.&lt;/p>
&lt;h4 id="type-generation">Type generation
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.npmjs.com/package/vite-plugin-dts" target="_blank" rel="noopener"
>vite-plugin-dts&lt;/a> is the plugin required to generate our type declarations. Similar to &lt;code>vite-plugin-lib-inject-css&lt;/code>, install it and add it to the &lt;code>plugins&lt;/code> array in &lt;code>vite.config.ts&lt;/code>.&lt;/p>
&lt;p>Again bridging the two tutorials, I preferred the single-file approach taken by the first tutorial, and as such I added the plugin with the option &lt;code>rollupTypes&lt;/code> set to &lt;code>true&lt;/code>.&lt;/p>
&lt;p>Assuming the &lt;code>rollupTypes&lt;/code> option was enabled, the generated code should now contain an &lt;code>index.d.ts&lt;/code> file with all of the types declared within it.&lt;/p>
&lt;h4 id="setting-up-packagejson">Setting up package.json
&lt;/h4>&lt;p>The other important file that requires some changes is the &lt;code>package.json&lt;/code> file. Add or update the following fields.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">package.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;type&amp;#34;: &amp;#34;module&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;files&amp;#34;: [&amp;#34;dist&amp;#34;],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;module&amp;#34;: &amp;#34;dist/index.js&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;types&amp;#34;: &amp;#34;dist/index.d.ts&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Some more information regarding the new or updated fields:&lt;/p>
&lt;ul>
&lt;li>&lt;code>type&lt;/code>: should be set to &lt;code>module&lt;/code>. to indicate that we&amp;rsquo;re using ES module syntax&lt;/li>
&lt;li>&lt;code>files&lt;/code>: describes the files to be included when the package is published&lt;/li>
&lt;li>&lt;code>module&lt;/code>: not an official Node feature, but supported by some bundlers&lt;/li>
&lt;li>&lt;code>types&lt;/code>: exposes the type declarations entry point&lt;/li>
&lt;li>&lt;code>exports&lt;/code>: &lt;em>Optional&lt;/em> the entry points to the library&lt;/li>
&lt;li>&lt;code>main&lt;/code>: This is used to specify the entry point for &lt;code>cjs&lt;/code>, which we&amp;rsquo;re not supporting&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Life cycle scripts&lt;/strong>&lt;/p>
&lt;p>A script is also useful to specify here. While using &lt;code>prepublishOnly&lt;/code> makes sense if we&amp;rsquo;re planning to publish the library via &lt;code>npm publish&lt;/code>, using &lt;code>prepare&lt;/code> will run both on &lt;code>npm publish&lt;/code> and &lt;code>npm install&lt;/code> which allows us to install the library locally.&lt;/p>
&lt;p>Add the following to &lt;code>package.json&lt;/code> under &lt;code>scripts&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">package.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;scripts&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;prepare&amp;#34;: &amp;#34;vite build&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More information on these &amp;ldquo;life cycle scripts&amp;rdquo; can be found &lt;a class="link" href="https://arc.net/l/quote/qplfovup" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="development">Development
&lt;/h2>&lt;p>The following are simply some additions to the development tooling for the library itself. This won&amp;rsquo;t be a guide on how to use any of the tooling, but simply provides some basic installation steps and ensuring that the files are not bundled into our generated library code.&lt;/p>
&lt;h3 id="storybook">Storybook
&lt;/h3>&lt;p>Storybook can be installed by running the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm dlx storybook@latest init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>src/stories/&lt;/code> folder can be removed if desired as it only contains some sample stories and documentation.&lt;/p>
&lt;p>Stories can now be added for any of our components — documentation on how to do so can be found &lt;a class="link" href="https://storybook.js.org/docs/writing-stories" target="_blank" rel="noopener"
>here&lt;/a>. Once stories have been added, run Storybook with the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm storybook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Ignoring Storybook files&lt;/strong>&lt;/p>
&lt;p>The last thing we need to do here is to ensure that we aren&amp;rsquo;t bundling our stories in the generated code. We do this by extending the &lt;code>glob.sync&lt;/code> command we added to &lt;code>build.rollupOptions.input&lt;/code> in &lt;code>vite.config.ts&lt;/code> and providing an &lt;code>ignore&lt;/code> field to the options as follows.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">glob&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/**/*.{ts,tsx}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ignore&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;src/**/*.stories.{ts,tsx}&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="vitest">Vitest
&lt;/h3>&lt;p>Vitest, jsdom and the React Testing Library (we&amp;rsquo;ll need all three) can be installed with the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm i -D vitest jsdom @testing-library/react
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add a &lt;code>test&lt;/code> script to &lt;code>package.json&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">package.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;scripts&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;test&amp;#34;: &amp;#34;vitest&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next we need to update our &lt;code>vite.config.ts&lt;/code> file.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+/// &amp;lt;reference types=&amp;#34;vitest&amp;#34; /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>export default defineConfig({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ test: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ environment: &amp;#34;jsdom&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ globals: true,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ root: &amp;#34;src/&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ },
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And to get those globals working nicely so we don&amp;rsquo;t need to repeatedly import &lt;code>describe&lt;/code>, &lt;code>test&lt;/code> etc. we need to add the following to &lt;code>tsconfig.json&lt;/code> under &lt;code>compilerOptions&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">tsconfig.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;compilerOptions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;types&amp;#34;: [&amp;#34;vitest/globals&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Ignoring test files&lt;/strong>&lt;/p>
&lt;p>Similar to Storybook, we also need to make sure we&amp;rsquo;re not generated code for our tests. Update the &lt;code>glob.sync&lt;/code> command in &lt;code>vite.config.ts&lt;/code> under &lt;code>build.rollupOptions.input&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">glob&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/**/*.{ts,tsx}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ignore&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;src/**/*.stories.{ts,tsx}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;src/**/*.test.{ts,tsx}&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="using-the-library">Using the library
&lt;/h2>&lt;p>Both of the linked tutorials go into publishing the library on npm, however due to the nature of a sample library I didn&amp;rsquo;t want to delve into the publishing side of things.&lt;/p>
&lt;p>However, outside of publishing it on npm I was unsure as to how I could actually use the library, and to my pleasure it was actually incredibly straightforward.&lt;/p>
&lt;p>&lt;strong>Github repository&lt;/strong>&lt;/p>
&lt;p>Very simple, this allows you to install directly from the repository using the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm i -D GITHUB_NAME/REPOSITORY_NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which results in the following &lt;code>package.json&lt;/code> entry under &lt;code>devDependencies&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">package.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;PACKAGE_NAME&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;github:GITHUB_NAME/REPOSITORY_NAME&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Local reference&lt;/strong>&lt;/p>
&lt;p>Equally as straightforward, the following command can be run to create a local reference.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm i -D PATH_TO_LIBRARY
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which similar to the above results in the following &lt;code>package.json&lt;/code> entry under &lt;code>devDependencies&lt;/code>.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">package.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;PACKAGE_NAME&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;link:PATH_TO_LIBRARY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sample-repository">Sample repository
&lt;/h3>&lt;p>I did end up with a functional component library — albeit one with all of two components and a custom hook. It&amp;rsquo;s available on GitHub &lt;a class="link" href="https://github.com/vivecuervo7/demolib" target="_blank" rel="noopener"
>here&lt;/a>, or it can be used as above with the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pnpm i -D vivecuervo7/demolib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Using Keycloak with a React SPA + MSAL</title><link>https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/</guid><description>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/cover.jpg" alt="Featured image of post Using Keycloak with a React SPA + MSAL" />&lt;p>One of my main motivations for looking into Keycloak was to decouple local development from a third party authentication server which needed to be configured by the client. More often than not, this is done using Microsoft Entra ID, and in a typical React application we would use MSAL to set up client authentication.&lt;/p>
&lt;p>This serves as a short guide to resolving some of the issues encountered when trying to use MSAL with a locally-configured Keycloak server.&lt;/p>
&lt;p>See the example repo &lt;a class="link" href="https://github.com/vivecuervo7/local-auth-with-keycloak-example" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="running-keycloak-with-https">Running Keycloak with HTTPS
&lt;/h2>&lt;p>Keycloak will be exposed at &lt;a class="link" href="http://localhost:8080" target="_blank" rel="noopener"
>http://localhost:8080&lt;/a> which is all well and good for most cases, however I was wanting to drop this in as a local auth replacement for MSAL in a typical React project.&lt;/p>
&lt;p>Since &lt;code>@azure/msal-browser&lt;/code> &lt;a class="link" href="https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/6631" target="_blank" rel="noopener"
>doesn&amp;rsquo;t allow us to use a HTTP authority&lt;/a>, the default Keycloak endpoint won&amp;rsquo;t work. The following steps allow for running Keycloak with HTTPS.&lt;/p>
&lt;h3 id="creating-a-self-signed-certificate-using-dotnet-dev-certs">Creating a self-signed certificate using dotnet dev-certs
&lt;/h3>&lt;p>Since dotnet-certs are typically used for local dev when building .NET applications, it seemed easiest to simply repurpose the same tooling to create other local dev certs.&lt;/p>
&lt;p>Create the self-signed certificate by running the following in your terminal, in this case using &lt;code>password&lt;/code> as the credential to create the following two files: &lt;code>certificate.crt&lt;/code> and &lt;code>certificate.key&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">dotnet dev-certs https -ep ./certificate.crt -p password --trust --format PEM
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;code>openssl&lt;/code> to decrypt the certificate key, overwriting &lt;code>certificate.key&lt;/code> with the decrypted copy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">openssl rsa -in certificate.key -out certificate.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a matter of preference, I tend to rename these files to &lt;code>cert.pem&lt;/code> and &lt;code>key.pem&lt;/code>. The remainder of this guide assumes this naming.&lt;/p>
&lt;h3 id="running-keycloak-with-the-certificate">Running Keycloak with the certificate
&lt;/h3>&lt;p>The following changes expect that the certificate files we just created are present in a &lt;code>certificates&lt;/code> directory. Go ahead and create the folder and copy both the certificate and key into it.&lt;/p>
&lt;p>Create or update your &lt;code>docker-compose.yml&lt;/code> file to the following and run by calling &lt;code>docker-compose up -d&lt;/code> in your terminal.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">docker-compose.yml&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">keycloak&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">quay.io/keycloak/keycloak:25.0.2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">keycloak&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8443&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">KEYCLOAK_ADMIN=admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">KEYCLOAK_ADMIN_PASSWORD=admin&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./import:/opt/keycloak/data/import&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">./certificates:/opt/keycloak/data/certificates&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;start-dev&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--import-realm&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--https-certificate-file=/opt/keycloak/data/certificates/cert.pem&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;--https-certificate-key-file=/opt/keycloak/data/certificates/key.pem&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can now access the Keycloak server at either &lt;a class="link" href="http://localhost:8080" target="_blank" rel="noopener"
>http://localhost:8080&lt;/a> or &lt;a class="link" href="https://localhost:8443" target="_blank" rel="noopener"
>https://localhost:8443&lt;/a>. Using the HTTPS endpoint should allow us to use Keycloak with &lt;a class="link" href="https://github.com/AzureAD/microsoft-authentication-library-for-js" target="_blank" rel="noopener"
>@azure/msal-browser&lt;/a>.&lt;/p>
&lt;h2 id="configuring-msal-to-work-with-keycloak">Configuring MSAL to work with Keycloak
&lt;/h2>&lt;p>Without delving too deep into how we might hold MSAL in a typical React application, the biggest change we need to make is to manually provide some of the configuration that usually works out of the box with MSAL when using Microsoft Entra ID.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">msalConfig&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">auth&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clientId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;local-dev-client&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">authority&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">knownAuthorities&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">redirectUri&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:5173&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">postLogoutRedirectUri&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:5173&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">protocolMode&lt;/span>: &lt;span class="kt">ProtocolMode.OIDC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">authorityMetadata&lt;/span>: &lt;span class="kt">JSON.stringify&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">authorization_endpoint&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/auth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">token_endpoint&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/token&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">issuer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userinfo_endpoint&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/userinfo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">end_session_endpoint&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/logout&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">msalInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PublicClientApplication&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">msalConfig&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There are of course a few more data points required, which may then need to be manually provided again when configuring this to work with both Keycloak locally &lt;em>and&lt;/em> Microsoft Entra ID when deployed. A small amount of pain to endure for the benefits of decoupling ourselves from a customer-provided auth server.&lt;/p>
&lt;p>Of course, in practice we would make these string more easily configurable, but I&amp;rsquo;ve opted to hardcode them to better demonstrate.&lt;/p>
&lt;p>See the &lt;a class="link" href="https://github.com/vivecuervo7/local-auth-with-keycloak-example" target="_blank" rel="noopener"
>sample repo&lt;/a> to see these changes in more context.&lt;/p>
&lt;p>&lt;strong>OpenID Endpoint Configuration&lt;/strong>&lt;/p>
&lt;p>The trickier part here might be knowing where to obtain these strings from. Navigating to the realm settings of our Keycloak server&amp;rsquo;s admin interface, find the &lt;strong>OpenID Endpoint Configuration&lt;/strong> link.&lt;/p>
&lt;p>&lt;img src="https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/images/realm-settings.jpg"
width="1408"
height="975"
srcset="https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/images/realm-settings_hu_ce7c09598f6534e5.jpg 480w, https://vivecuervo7.github.io/dev-blog/p/keycloak-react-spa-msal/images/realm-settings_hu_1f191b53176cb3df.jpg 1024w"
loading="lazy"
alt="OpenID Endpoint Configuration link"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>Opening this will yield a new page with all of our endpoints that we need to populate this config.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;issuer&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;authorization_endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/auth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;token_endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/token&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;userinfo_endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/userinfo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;end_session_endpoint&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;https://localhost:8443/realms/local-dev/protocol/openid-connect/logout&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="running-react-with-https">Running React with HTTPS
&lt;/h3>&lt;p>We may also need to run our React application with HTTPS as well. To achieve this, we need to update &lt;code>vite.config.ts&lt;/code> to contain the following. Fortunately, we can repurpose the same certificates we created for Keycloak.&lt;/p>
&lt;p>Note that while omitted below, it may be useful to split the &lt;code>serve&lt;/code> and &lt;code>build&lt;/code> commands so we keep our changes away from any deployed code.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">vite.config.ts&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">import { defineConfig, loadEnv } from &amp;#34;vite&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import react from &amp;#34;@vitejs/plugin-react-swc&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export default defineConfig(({ command, mode }) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ process.env = { ...process.env, ...loadEnv(mode, process.cwd()) };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> plugins: [react()],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ server: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ https: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ cert: process.env.VITE_CERT ?? &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ key: process.env.VITE_CERT_KEY ?? &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ },
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ },
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And then we&amp;rsquo;ll also need to add a &lt;code>.env&lt;/code> (and &lt;code>.env.local&lt;/code>) with the correct paths.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">.env&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ VITE_CERT=../local-dev/certificates/cert.pem
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ VITE_CERT_KEY=../local-dev/certificates/key.pem
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now running the React application with &lt;code>pnpm dev&lt;/code> should serve it using HTTPS.&lt;/p>
&lt;h3 id="missing-parameter-id_token_hint">Missing parameter: id_token_hint
&lt;/h3>&lt;p>I did run into a small issue with the setup, where a user was unable to logout completely. Attempting to logout was yielding an error due to the absence of either a &lt;code>client_id&lt;/code> or &lt;code>id_token_hint&lt;/code> when requesting the &lt;code>post_logout_redirect_uri&lt;/code>.&lt;/p>
&lt;p>Ultimately, this was easily resolved by obtaining an access token &lt;em>before&lt;/em> attempting to logout, and using the &lt;code>id_token&lt;/code> from that.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">main.tsx&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleLogout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">acquireTokenSilent&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scopes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;openid&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">logoutRedirect&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">idTokenHint&lt;/span>: &lt;span class="kt">response.idToken&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="optional-adding-a-secured-net-backend">Optional: Adding a secured .NET backend
&lt;/h2>&lt;p>The &lt;a class="link" href="https://github.com/vivecuervo7/local-auth-with-keycloak-example" target="_blank" rel="noopener"
>sample repo&lt;/a> contains code that also connects the React application to a .NET API with a secured endpoint.&lt;/p>
&lt;p>The configuration here is relatively straightforward to work with our local Keycloak server.&lt;/p>
&lt;p>The main changes we&amp;rsquo;ll need to make are to &lt;code>Program.cs&lt;/code>, where we simply add our necessary configuration (truncated for brevity).&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">Program.cs&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ using Microsoft.AspNetCore.Authentication.JwtBearer;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var builder = WebApplication.CreateBuilder(args);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ builder
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .Services.AddAuthentication(options =&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ })
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .AddJwtBearer(options =&amp;gt; builder.Configuration.Bind(&amp;#34;JwtBearerOptions&amp;#34;, options));
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ builder
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .Services.AddAuthorizationBuilder()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .AddDefaultPolicy(&amp;#34;RequireAuthenticatedUser&amp;#34;, policy =&amp;gt; policy.RequireAuthenticatedUser());
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var app = builder.Build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> app.UseHttpsRedirection();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ app.UseAuthentication();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ app.UseAuthorization();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> app.MapGet(&amp;#34;/weatherforecast&amp;#34;, () =&amp;gt; [])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .WithName(&amp;#34;GetWeatherForecast&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .WithOpenApi()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ .RequireAuthorization();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> await app.RunAsync();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And providing the appropriate configuration via appsettings.&lt;/p>
&lt;div class="code-hint-block">
&lt;span class="code-hint-path">&lt;/span
>&lt;span class="code-hint">appsettings.json&lt;/span>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;JwtBearerOptions&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;Authority&amp;#34;: &amp;#34;https://localhost:8443/realms/local-dev&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;Audience&amp;#34;: &amp;#34;local-dev-client&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Running the code in the sample repo will result in the React application displaying a button which calls the &lt;code>/weatherforecast&lt;/code> endpoint to illustrate the correct responses are returned depending on whether the client has been authenticated or not.&lt;/p></description></item></channel></rss>